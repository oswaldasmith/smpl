
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.comp3652.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import com.comp3652.values.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\005\000\002\036\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\005\000" +
    "\002\034\006\000\002\034\003\000\002\034\006\000\002" +
    "\035\003\000\002\035\003\000\002\037\010\000\002\040" +
    "\007\000\002\044\005\000\002\044\005\000\002\044\003" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\005\000\002\047" +
    "\003\000\002\047\004\000\002\047\004\000\002\030\013" +
    "\000\002\007\006\000\002\010\006\000\002\011\006\000" +
    "\002\013\006\000\002\014\006\000\002\015\010\000\002" +
    "\016\010\000\002\017\012\000\002\012\006\000\002\012" +
    "\006\000\002\026\005\000\002\026\005\000\002\021\006" +
    "\000\002\021\010\000\002\023\005\000\002\024\005\000" +
    "\002\025\011\000\002\022\007\000\002\022\007\000\002" +
    "\027\010\000\002\027\006\000\002\020\006\000\002\042" +
    "\005\000\002\042\003\000\002\043\003\000\002\043\003" +
    "\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\076\002\uffad\004\uffad\007\uffad\010\uffad\011" +
    "\uffad\014\uffad\016\uffad\026\uffad\032\uffad\033\uffad\034\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\047\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\001" +
    "\002\000\004\002\311\001\002\000\112\002\ufffe\004\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\014\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\001\002\000\076\002\000\004\066\007\016" +
    "\010\050\011\040\014\013\016\023\026\032\032\046\033" +
    "\007\034\063\036\010\037\017\040\026\041\074\042\027" +
    "\043\057\044\015\045\020\047\044\052\062\053\021\054" +
    "\056\055\030\056\034\057\014\060\047\061\071\062\072" +
    "\063\012\001\002\000\004\016\304\001\002\000\004\016" +
    "\275\001\002\000\012\017\ufff0\020\ufff0\023\ufff0\024\ufff0" +
    "\001\002\000\012\017\uffed\020\uffed\023\uffed\024\uffed\001" +
    "\002\000\004\024\271\001\002\000\012\017\uffef\020\uffef" +
    "\023\uffef\024\uffef\001\002\000\004\016\267\001\002\000" +
    "\004\016\264\001\002\000\004\016\261\001\002\000\004" +
    "\021\247\001\002\000\030\017\uffd0\020\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\046\uffd0" +
    "\050\uffd0\001\002\000\012\017\uffe5\020\uffe5\023\uffe5\024" +
    "\uffe5\001\002\000\020\016\023\026\032\053\021\054\056" +
    "\055\030\056\034\062\177\001\002\000\012\017\uffe0\020" +
    "\uffe0\023\uffe0\024\uffe0\001\002\000\012\017\uffea\020\uffea" +
    "\023\uffea\024\uffea\001\002\000\004\016\242\001\002\000" +
    "\004\016\237\001\002\000\030\017\uffce\020\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\046" +
    "\uffce\050\uffce\001\002\000\004\023\236\001\002\000\020" +
    "\016\023\026\032\053\021\054\056\055\030\056\034\062" +
    "\177\001\002\000\112\002\ufff9\004\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\047\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001" +
    "\002\000\030\017\uffcf\020\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\046\uffcf\050\uffcf\001" +
    "\002\000\012\017\uffe8\020\uffe8\023\uffe8\024\uffe8\001\002" +
    "\000\030\017\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\202\030\201\031\203\046\uffd5\050\uffd5\001\002" +
    "\000\012\017\uffe3\020\uffe3\023\uffe3\024\uffe3\001\002\000" +
    "\004\016\230\001\002\000\004\023\227\001\002\000\012" +
    "\017\uffeb\020\uffeb\023\uffeb\024\uffeb\001\002\000\012\017" +
    "\ufff1\020\ufff1\023\ufff1\024\ufff1\001\002\000\020\016\023" +
    "\026\032\053\021\054\056\055\030\056\034\062\177\001" +
    "\002\000\030\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\046\uffd1\050\uffd1\001" +
    "\002\000\004\016\216\001\002\000\012\017\uffee\020\uffee" +
    "\023\uffee\024\uffee\001\002\000\004\016\211\001\002\000" +
    "\012\017\uffe9\020\uffe9\023\uffe9\024\uffe9\001\002\000\012" +
    "\017\uffe2\020\uffe2\023\uffe2\024\uffe2\001\002\000\020\017" +
    "\ufff2\020\ufff2\023\ufff2\024\ufff2\025\175\026\176\046\174" +
    "\001\002\000\030\017\uffcb\020\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\046\uffcb\050\uffcb" +
    "\001\002\000\012\017\uffe1\020\uffe1\023\uffe1\024\uffe1\001" +
    "\002\000\030\017\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\046\uffcd\050\uffcd\001" +
    "\002\000\004\016\172\001\002\000\012\017\uffe4\020\uffe4" +
    "\023\uffe4\024\uffe4\001\002\000\004\014\167\001\002\000" +
    "\004\016\154\001\002\000\004\016\147\001\002\000\012" +
    "\017\uffe6\020\uffe6\023\uffe6\024\uffe6\001\002\000\012\017" +
    "\uffe7\020\uffe7\023\uffe7\024\uffe7\001\002\000\004\062\131" +
    "\001\002\000\004\023\130\001\002\000\010\017\ufff5\020" +
    "\ufff5\023\ufff5\001\002\000\012\017\uffec\020\uffec\023\uffec" +
    "\024\uffec\001\002\000\012\012\124\013\125\016\102\023" +
    "\101\001\002\000\004\023\123\001\002\000\004\016\076" +
    "\001\002\000\112\002\uffff\004\uffff\007\uffff\010\uffff\011" +
    "\uffff\014\uffff\016\uffff\017\uffff\020\uffff\022\uffff\023\uffff" +
    "\024\uffff\026\uffff\032\uffff\033\uffff\034\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\047\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\001\002" +
    "\000\060\007\016\010\050\011\040\014\013\016\023\026" +
    "\032\032\046\033\007\034\063\036\010\037\017\040\026" +
    "\047\044\052\062\053\021\054\056\055\030\056\034\057" +
    "\014\060\047\061\071\062\100\063\012\001\002\000\004" +
    "\017\122\001\002\000\006\016\102\023\101\001\002\000" +
    "\030\017\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\046\uffca\050\uffca\001\002\000" +
    "\064\005\105\007\016\010\050\011\040\014\013\016\023" +
    "\026\032\032\046\033\007\034\063\035\104\036\010\037" +
    "\017\040\026\047\044\052\062\053\021\054\056\055\030" +
    "\056\034\057\014\060\047\061\071\062\100\063\012\001" +
    "\002\000\006\017\121\020\113\001\002\000\004\016\116" +
    "\001\002\000\004\016\107\001\002\000\010\017\uffdd\020" +
    "\uffdd\024\uffdd\001\002\000\066\005\105\007\016\010\050" +
    "\011\040\014\013\016\023\017\uffad\026\032\032\046\033" +
    "\007\034\063\035\104\036\010\037\017\040\026\047\044" +
    "\052\062\053\021\054\056\055\030\056\034\057\014\060" +
    "\047\061\071\062\100\063\012\001\002\000\004\017\uffda" +
    "\001\002\000\004\017\115\001\002\000\006\017\uffdb\020" +
    "\113\001\002\000\060\007\016\010\050\011\040\014\013" +
    "\016\023\026\032\032\046\033\007\034\063\036\010\037" +
    "\017\040\026\047\044\052\062\053\021\054\056\055\030" +
    "\056\034\057\014\060\047\061\071\062\100\063\012\001" +
    "\002\000\010\017\uffdf\020\uffdf\024\uffdf\001\002\000\010" +
    "\017\uffdc\020\uffdc\024\uffdc\001\002\000\064\005\105\007" +
    "\016\010\050\011\040\014\013\016\023\026\032\032\046" +
    "\033\007\034\063\035\104\036\010\037\017\040\026\047" +
    "\044\052\062\053\021\054\056\055\030\056\034\057\014" +
    "\060\047\061\071\062\100\063\012\001\002\000\006\017" +
    "\120\020\113\001\002\000\010\017\uffde\020\uffde\024\uffde" +
    "\001\002\000\012\017\uffb3\020\uffb3\023\uffb3\024\uffb3\001" +
    "\002\000\004\023\uffbf\001\002\000\112\002\ufffa\004\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\014\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\001\002\000\060\007\016\010\050\011\040" +
    "\014\013\016\023\026\032\032\046\033\007\034\063\036" +
    "\010\037\017\040\026\047\044\052\062\053\021\054\056" +
    "\055\030\056\034\057\014\060\047\061\071\062\100\063" +
    "\012\001\002\000\060\007\016\010\050\011\040\014\013" +
    "\016\023\026\032\032\046\033\007\034\063\036\010\037" +
    "\017\040\026\047\044\052\062\053\021\054\056\055\030" +
    "\056\034\057\014\060\047\061\071\062\100\063\012\001" +
    "\002\000\010\017\ufff6\020\ufff6\023\ufff6\001\002\000\010" +
    "\017\ufff7\020\ufff7\023\ufff7\001\002\000\112\002\ufffc\004" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\047\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\001\002\000\062\005\132\007\016\010" +
    "\050\011\040\014\013\016\023\026\032\032\046\033\007" +
    "\034\063\036\010\037\017\040\026\047\044\052\062\053" +
    "\021\054\056\055\030\056\034\057\014\060\047\061\071" +
    "\062\100\063\012\001\002\000\004\016\134\001\002\000" +
    "\010\017\ufff8\020\ufff8\023\ufff8\001\002\000\006\017\uffad" +
    "\062\135\001\002\000\006\017\uffb0\020\uffb0\001\002\000" +
    "\006\017\uffaf\020\145\001\002\000\004\017\uffae\001\002" +
    "\000\004\017\141\001\002\000\004\021\142\001\002\000" +
    "\076\004\uffad\007\uffad\010\uffad\011\uffad\014\uffad\016\uffad" +
    "\022\uffad\026\uffad\032\uffad\033\uffad\034\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\047\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\001\002\000\076" +
    "\004\066\007\016\010\050\011\040\014\013\016\023\022" +
    "\144\026\032\032\046\033\007\034\063\036\010\037\017" +
    "\040\026\041\074\042\027\043\057\044\015\045\020\047" +
    "\044\052\062\053\021\054\056\055\030\056\034\057\014" +
    "\060\047\061\071\062\072\063\012\001\002\000\112\002" +
    "\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\001\002\000\004\062\146\001" +
    "\002\000\006\017\uffb1\020\uffb1\001\002\000\060\007\016" +
    "\010\050\011\040\014\013\016\023\026\032\032\046\033" +
    "\007\034\063\036\010\037\017\040\026\047\044\052\062" +
    "\053\021\054\056\055\030\056\034\057\014\060\047\061" +
    "\071\062\100\063\012\001\002\000\004\020\151\001\002" +
    "\000\060\007\016\010\050\011\040\014\013\016\023\026" +
    "\032\032\046\033\007\034\063\036\010\037\017\040\026" +
    "\047\044\052\062\053\021\054\056\055\030\056\034\057" +
    "\014\060\047\061\071\062\100\063\012\001\002\000\004" +
    "\017\153\001\002\000\012\017\uffc2\020\uffc2\023\uffc2\024" +
    "\uffc2\001\002\000\062\004\157\007\016\010\050\011\040" +
    "\014\013\016\023\026\032\032\046\033\007\034\063\036" +
    "\010\037\017\040\026\047\044\052\062\053\021\054\056" +
    "\055\030\056\034\057\014\060\047\061\071\062\072\063" +
    "\012\001\002\000\004\017\165\001\002\000\006\017\162" +
    "\020\161\001\002\000\004\062\160\001\002\000\060\007" +
    "\016\010\050\011\040\014\013\016\023\026\032\032\046" +
    "\033\007\034\063\036\010\037\017\040\026\047\044\052" +
    "\062\053\021\054\056\055\030\056\034\057\014\060\047" +
    "\061\071\062\100\063\012\001\002\000\062\004\157\007" +
    "\016\010\050\011\040\014\013\016\023\026\032\032\046" +
    "\033\007\034\063\036\010\037\017\040\026\047\044\052" +
    "\062\053\021\054\056\055\030\056\034\057\014\060\047" +
    "\061\071\062\072\063\012\001\002\000\104\004\uffad\007" +
    "\uffad\010\uffad\011\uffad\014\uffad\016\uffad\017\uffad\020\uffad" +
    "\023\uffad\024\uffad\026\uffad\032\uffad\033\uffad\034\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\047\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\001\002" +
    "\000\104\004\066\007\016\010\050\011\040\014\013\016" +
    "\023\017\uffb6\020\uffb6\023\uffb6\024\uffb6\026\032\032\046" +
    "\033\007\034\063\036\010\037\017\040\026\041\074\042" +
    "\027\043\057\044\015\045\020\047\044\052\062\053\021" +
    "\054\056\055\030\056\034\057\014\060\047\061\071\062" +
    "\072\063\012\001\002\000\006\017\ufff4\020\ufff4\001\002" +
    "\000\104\004\uffad\007\uffad\010\uffad\011\uffad\014\uffad\016" +
    "\uffad\017\uffad\020\uffad\023\uffad\024\uffad\026\uffad\032\uffad" +
    "\033\uffad\034\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\047\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\001\002\000\104\004\066\007\016\010\050" +
    "\011\040\014\013\016\023\017\uffb5\020\uffb5\023\uffb5\024" +
    "\uffb5\026\032\032\046\033\007\034\063\036\010\037\017" +
    "\040\026\041\074\042\027\043\057\044\015\045\020\047" +
    "\044\052\062\053\021\054\056\055\030\056\034\057\014" +
    "\060\047\061\071\062\072\063\012\001\002\000\004\053" +
    "\170\001\002\000\004\015\171\001\002\000\012\017\uffc4" +
    "\020\uffc4\023\uffc4\024\uffc4\001\002\000\004\017\173\001" +
    "\002\000\004\023\uffbd\001\002\000\020\016\023\026\032" +
    "\053\021\054\056\055\030\056\034\062\177\001\002\000" +
    "\020\016\023\026\032\053\021\054\056\055\030\056\034" +
    "\062\177\001\002\000\020\016\023\026\032\053\021\054" +
    "\056\055\030\056\034\062\177\001\002\000\004\023\101" +
    "\001\002\000\030\017\uffd6\020\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\202\030\201\031\203\046\uffd6\050\uffd6" +
    "\001\002\000\020\016\023\026\032\053\021\054\056\055" +
    "\030\056\034\062\177\001\002\000\020\016\023\026\032" +
    "\053\021\054\056\055\030\056\034\062\177\001\002\000" +
    "\020\016\023\026\032\053\021\054\056\055\030\056\034" +
    "\062\177\001\002\000\030\017\uffd4\020\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\046\uffd4" +
    "\050\uffd4\001\002\000\030\017\uffd3\020\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\046\uffd3" +
    "\050\uffd3\001\002\000\030\017\uffd2\020\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\046\uffd2" +
    "\050\uffd2\001\002\000\030\017\uffd7\020\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\202\030\201\031\203\046\uffd7" +
    "\050\uffd7\001\002\000\020\017\ufff3\020\ufff3\023\ufff3\024" +
    "\ufff3\025\175\026\176\050\ufff3\001\002\000\060\007\016" +
    "\010\050\011\040\014\013\016\023\026\032\032\046\033" +
    "\007\034\063\036\010\037\017\040\026\047\044\052\062" +
    "\053\021\054\056\055\030\056\034\057\014\060\047\061" +
    "\071\062\100\063\012\001\002\000\004\020\213\001\002" +
    "\000\060\007\016\010\050\011\040\014\013\016\023\026" +
    "\032\032\046\033\007\034\063\036\010\037\017\040\026" +
    "\047\044\052\062\053\021\054\056\055\030\056\034\057" +
    "\014\060\047\061\071\062\100\063\012\001\002\000\004" +
    "\017\215\001\002\000\012\017\uffd9\020\uffd9\023\uffd9\024" +
    "\uffd9\001\002\000\002\001\002\000\004\017\220\001\002" +
    "\000\012\017\uffc3\020\uffc3\023\uffc3\024\uffc3\001\002\000" +
    "\004\050\223\001\002\000\010\025\175\026\176\046\174" +
    "\001\002\000\106\004\uffad\007\uffad\010\uffad\011\uffad\014" +
    "\uffad\016\uffad\017\uffad\020\uffad\023\uffad\024\uffad\026\uffad" +
    "\032\uffad\033\uffad\034\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\063\uffad\001\002\000\106\004\066" +
    "\007\016\010\050\011\040\014\013\016\023\017\uffbb\020" +
    "\uffbb\023\uffbb\024\uffbb\026\032\032\046\033\007\034\063" +
    "\036\010\037\017\040\026\041\074\042\027\043\057\044" +
    "\015\045\020\047\044\051\225\052\062\053\021\054\056" +
    "\055\030\056\034\057\014\060\047\061\071\062\072\063" +
    "\012\001\002\000\104\004\uffad\007\uffad\010\uffad\011\uffad" +
    "\014\uffad\016\uffad\017\uffad\020\uffad\023\uffad\024\uffad\026" +
    "\uffad\032\uffad\033\uffad\034\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\001\002\000\104\004\066\007" +
    "\016\010\050\011\040\014\013\016\023\017\uffba\020\uffba" +
    "\023\uffba\024\uffba\026\032\032\046\033\007\034\063\036" +
    "\010\037\017\040\026\041\074\042\027\043\057\044\015" +
    "\045\020\047\044\052\062\053\021\054\056\055\030\056" +
    "\034\057\014\060\047\061\071\062\072\063\012\001\002" +
    "\000\112\002\ufffb\004\ufffb\007\ufffb\010\ufffb\011\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\032\ufffb\033\ufffb\034\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000\004" +
    "\062\231\001\002\000\004\020\232\001\002\000\064\005" +
    "\105\007\016\010\050\011\040\014\013\016\023\026\032" +
    "\032\046\033\007\034\063\035\104\036\010\037\017\040" +
    "\026\047\044\052\062\053\021\054\056\055\030\056\034" +
    "\057\014\060\047\061\071\062\100\063\012\001\002\000" +
    "\006\017\234\020\113\001\002\000\012\017\uffb4\020\uffb4" +
    "\023\uffb4\024\uffb4\001\002\000\030\017\uffc9\020\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\046\uffc9\050\uffc9\001\002\000\112\002\ufffd\004\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\026\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\060\007\016\010\050\011\040\014" +
    "\013\016\023\026\032\032\046\033\007\034\063\036\010" +
    "\037\017\040\026\047\044\052\062\053\021\054\056\055" +
    "\030\056\034\057\014\060\047\061\071\062\100\063\012" +
    "\001\002\000\004\017\241\001\002\000\004\023\uffbe\001" +
    "\002\000\002\001\002\000\004\017\244\001\002\000\012" +
    "\017\uffc6\020\uffc6\023\uffc6\024\uffc6\001\002\000\010\017" +
    "\246\025\175\026\176\001\002\000\030\017\uffcc\020\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\046\uffcc\050\uffcc\001\002\000\002\001\002\000\004" +
    "\020\251\001\002\000\022\016\023\026\032\051\253\053" +
    "\021\054\056\055\030\056\034\062\177\001\002\000\004" +
    "\024\257\001\002\000\074\004\066\007\016\010\050\011" +
    "\040\014\013\016\023\026\032\032\046\033\007\034\063" +
    "\036\010\037\017\040\026\041\074\042\027\043\057\044" +
    "\015\045\020\047\044\052\062\053\021\054\056\055\030" +
    "\056\034\057\014\060\047\061\071\062\072\063\012\001" +
    "\002\000\004\020\uffb8\001\002\000\004\022\256\001\002" +
    "\000\004\023\uffb7\001\002\000\074\004\066\007\016\010" +
    "\050\011\040\014\013\016\023\026\032\032\046\033\007" +
    "\034\063\036\010\037\017\040\026\041\074\042\027\043" +
    "\057\044\015\045\020\047\044\052\062\053\021\054\056" +
    "\055\030\056\034\057\014\060\047\061\071\062\072\063" +
    "\012\001\002\000\004\020\uffb9\001\002\000\002\001\002" +
    "\000\004\017\263\001\002\000\012\017\uffc7\020\uffc7\023" +
    "\uffc7\024\uffc7\001\002\000\002\001\002\000\004\017\266" +
    "\001\002\000\012\017\uffc5\020\uffc5\023\uffc5\024\uffc5\001" +
    "\002\000\004\017\270\001\002\000\004\023\uffbc\001\002" +
    "\000\064\005\105\007\016\010\050\011\040\014\013\016" +
    "\023\026\032\032\046\033\007\034\063\035\104\036\010" +
    "\037\017\040\026\047\044\052\062\053\021\054\056\055" +
    "\030\056\034\057\014\060\047\061\071\062\100\063\012" +
    "\001\002\000\006\020\113\024\273\001\002\000\004\015" +
    "\274\001\002\000\012\017\uffd8\020\uffd8\023\uffd8\024\uffd8" +
    "\001\002\000\004\063\276\001\002\000\004\020\277\001" +
    "\002\000\004\053\300\001\002\000\004\020\301\001\002" +
    "\000\004\053\302\001\002\000\004\017\303\001\002\000" +
    "\012\017\uffc0\020\uffc0\023\uffc0\024\uffc0\001\002\000\060" +
    "\007\016\010\050\011\040\014\013\016\023\026\032\032" +
    "\046\033\007\034\063\036\010\037\017\040\026\047\044" +
    "\052\062\053\021\054\056\055\030\056\034\057\014\060" +
    "\047\061\071\062\100\063\012\001\002\000\004\020\306" +
    "\001\002\000\060\007\016\010\050\011\040\014\013\016" +
    "\023\026\032\032\046\033\007\034\063\036\010\037\017" +
    "\040\026\047\044\052\062\053\021\054\056\055\030\056" +
    "\034\057\014\060\047\061\071\062\100\063\012\001\002" +
    "\000\004\017\310\001\002\000\012\017\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\010\002\003\003\005\050\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\004\074\005\030" +
    "\007\051\010\054\011\064\012\066\013\063\014\021\015" +
    "\057\016\036\017\024\021\050\022\034\025\072\026\040" +
    "\027\041\030\032\031\060\033\067\036\023\037\042\040" +
    "\010\044\052\045\035\046\053\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\044\244\045\035" +
    "\046\053\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\046\053\047\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\036\220" +
    "\044\221\045\035\046\053\047\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\007\051\010\054\011" +
    "\064\013\063\014\021\015\057\016\036\017\024\021\050" +
    "\022\034\027\041\031\060\033\076\036\023\037\042\040" +
    "\010\044\052\045\035\046\053\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\051\010\054\011\064\013\063\014\021\015\057\016\036" +
    "\017\024\021\050\022\034\027\041\031\060\033\105\034" +
    "\102\036\023\037\042\040\010\044\052\045\035\046\053" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\007\051\010\054" +
    "\011\064\013\063\014\021\015\057\016\036\017\024\021" +
    "\050\022\034\027\041\031\060\033\105\034\111\035\110" +
    "\036\023\037\042\040\010\044\052\045\035\046\053\047" +
    "\044\050\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\007\051\010\054\011\064\013" +
    "\063\014\021\015\057\016\036\017\024\021\050\022\034" +
    "\027\041\031\060\033\113\036\023\037\042\040\010\044" +
    "\052\045\035\046\053\047\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\007\051\010\054\011\064\013" +
    "\063\014\021\015\057\016\036\017\024\021\050\022\034" +
    "\027\041\031\060\033\105\034\116\036\023\037\042\040" +
    "\010\044\052\045\035\046\053\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\007\051\010\054\011\064" +
    "\013\063\014\021\015\057\016\036\017\024\021\050\022" +
    "\034\027\041\031\060\033\126\036\023\037\042\040\010" +
    "\044\052\045\035\046\053\047\044\001\001\000\052\007" +
    "\051\010\054\011\064\013\063\014\021\015\057\016\036" +
    "\017\024\021\050\022\034\027\041\031\060\033\125\036" +
    "\023\037\042\040\010\044\052\045\035\046\053\047\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\007\051\010\054\011\064\013\063\014\021" +
    "\015\057\016\036\017\024\021\050\022\034\027\041\031" +
    "\060\033\132\036\023\037\042\040\010\044\052\045\035" +
    "\046\053\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\135\043\137\050\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\142\050\004\001\001" +
    "\000\066\004\074\005\030\007\051\010\054\011\064\012" +
    "\066\013\063\014\021\015\057\016\036\017\024\021\050" +
    "\022\034\025\072\026\040\027\041\030\032\031\060\033" +
    "\067\036\023\037\042\040\010\044\052\045\035\046\053" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\007\051\010\054\011\064\013\063" +
    "\014\021\015\057\016\036\017\024\021\050\022\034\027" +
    "\041\031\060\033\147\036\023\037\042\040\010\044\052" +
    "\045\035\046\053\047\044\001\001\000\002\001\001\000" +
    "\052\007\051\010\054\011\064\013\063\014\021\015\057" +
    "\016\036\017\024\021\050\022\034\027\041\031\060\033" +
    "\151\036\023\037\042\040\010\044\052\045\035\046\053" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\005\154\006\155\007\051\010\054\011\064\013\063" +
    "\014\021\015\057\016\036\017\024\021\050\022\034\027" +
    "\041\031\060\033\067\036\023\037\042\040\010\044\052" +
    "\045\035\046\053\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\007\051\010\054" +
    "\011\064\013\063\014\021\015\057\016\036\017\024\021" +
    "\050\022\034\027\041\031\060\033\132\036\023\037\042" +
    "\040\010\044\052\045\035\046\053\047\044\001\001\000" +
    "\054\005\163\007\051\010\054\011\064\013\063\014\021" +
    "\015\057\016\036\017\024\021\050\022\034\027\041\031" +
    "\060\033\067\036\023\037\042\040\010\044\052\045\035" +
    "\046\053\047\044\001\001\000\006\003\162\050\004\001" +
    "\001\000\066\004\074\005\030\007\051\010\054\011\064" +
    "\012\066\013\063\014\021\015\057\016\036\017\024\021" +
    "\050\022\034\025\072\026\040\027\041\030\032\031\060" +
    "\033\067\036\023\037\042\040\010\044\052\045\035\046" +
    "\053\047\044\001\001\000\002\001\001\000\006\003\165" +
    "\050\004\001\001\000\066\004\074\005\030\007\051\010" +
    "\054\011\064\012\066\013\063\014\021\015\057\016\036" +
    "\017\024\021\050\022\034\025\072\026\040\027\041\030" +
    "\032\031\060\033\067\036\023\037\042\040\010\044\052" +
    "\045\035\046\053\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\044\207\045\035\046\053\047\044\001" +
    "\001\000\010\045\206\046\053\047\044\001\001\000\010" +
    "\045\177\046\053\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\053\047\205\001\001\000\006" +
    "\046\053\047\204\001\001\000\006\046\053\047\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\007\051\010" +
    "\054\011\064\013\063\014\021\015\057\016\036\017\024" +
    "\021\050\022\034\027\041\031\060\033\211\036\023\037" +
    "\042\040\010\044\052\045\035\046\053\047\044\001\001" +
    "\000\002\001\001\000\052\007\051\010\054\011\064\013" +
    "\063\014\021\015\057\016\036\017\024\021\050\022\034" +
    "\027\041\031\060\033\213\036\023\037\042\040\010\044" +
    "\052\045\035\046\053\047\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\223\050\004\001\001\000\066\004\074\005" +
    "\030\007\051\010\054\011\064\012\066\013\063\014\021" +
    "\015\057\016\036\017\024\021\050\022\034\025\072\026" +
    "\040\027\041\030\032\031\060\033\067\036\023\037\042" +
    "\040\010\044\052\045\035\046\053\047\044\001\001\000" +
    "\006\003\225\050\004\001\001\000\066\004\074\005\030" +
    "\007\051\010\054\011\064\012\066\013\063\014\021\015" +
    "\057\016\036\017\024\021\050\022\034\025\072\026\040" +
    "\027\041\030\032\031\060\033\067\036\023\037\042\040" +
    "\010\044\052\045\035\046\053\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\051\010\054\011\064\013\063\014\021\015\057\016\036" +
    "\017\024\021\050\022\034\027\041\031\060\033\105\034" +
    "\232\036\023\037\042\040\010\044\052\045\035\046\053" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\007\051\010\054" +
    "\011\064\013\063\014\021\015\057\016\036\017\024\021" +
    "\050\022\034\027\041\031\060\033\237\036\023\037\042" +
    "\040\010\044\052\045\035\046\053\047\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\247\001\001\000\002\001\001" +
    "\000\016\023\253\036\251\044\221\045\035\046\053\047" +
    "\044\001\001\000\002\001\001\000\066\004\254\005\030" +
    "\007\051\010\054\011\064\012\066\013\063\014\021\015" +
    "\057\016\036\017\024\021\050\022\034\025\072\026\040" +
    "\027\041\030\032\031\060\033\067\036\023\037\042\040" +
    "\010\044\052\045\035\046\053\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\004" +
    "\257\005\030\007\051\010\054\011\064\012\066\013\063" +
    "\014\021\015\057\016\036\017\024\021\050\022\034\025" +
    "\072\026\040\027\041\030\032\031\060\033\067\036\023" +
    "\037\042\040\010\044\052\045\035\046\053\047\044\001" +
    "\001\000\002\001\001\000\004\032\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\007\051\010\054\011\064\013\063\014" +
    "\021\015\057\016\036\017\024\021\050\022\034\027\041" +
    "\031\060\033\105\034\271\036\023\037\042\040\010\044" +
    "\052\045\035\046\053\047\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\007" +
    "\051\010\054\011\064\013\063\014\021\015\057\016\036" +
    "\017\024\021\050\022\034\027\041\031\060\033\304\036" +
    "\023\037\042\040\010\044\052\045\035\046\053\047\044" +
    "\001\001\000\002\001\001\000\052\007\051\010\054\011" +
    "\064\013\063\014\021\015\057\016\036\017\024\021\050" +
    "\022\034\027\041\031\060\033\306\036\023\037\042\040" +
    "\010\044\052\045\035\046\053\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

        public SMPLParser(String file) throws FileNotFoundException {
            this(new SMPLLexer(new FileReader(file)));
        }

        public SMPLParser(Reader is) {
            this(new SMPLLexer(is));
        }

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStmtSequence s = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SMPLStmtSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLStmtSequence seq = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                seq.addStatement(s);
                RESULT = seq; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= empty 
            {
              SMPLStmtSequence RESULT =null;
		
              RESULT = new SMPLStmtSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= binding SEMI 
            {
              SMPLStatement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLStmtDefinition b = (SMPLStmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = b;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= print SEMI 
            {
              SMPLStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLPrintStmt p = (SMPLPrintStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = p;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= read SEMI 
            {
              SMPLStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLReadStmt r = (SMPLReadStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = r;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= caseFunc SEMI 
            {
              SMPLStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLCaseFunction c = (SMPLCaseFunction)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = c;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= funcDef 
            {
              SMPLStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLFunDef f = (SMPLFunDef)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = f;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // binding ::= DEF VAR smplExp 
            {
              SMPLStmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            		    RESULT = new SMPLStmtDefinition(v,e);
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // binding ::= VAR BE smplExp 
            {
              SMPLStmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                        RESULT = new SMPLStmtDefinition(v,e);
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // binding ::= VAR ASSIGN smplExp 
            {
              SMPLStmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                        RESULT = new SMPLStmtDefinition(v,e);
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // binding ::= smplExp 
            {
              SMPLStmtDefinition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                        RESULT = new SMPLStmtDefinition(null,e);
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bindList ::= bindList COMMA binding 
            {
              ArrayList<SMPLStmtDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLStmtDefinition> l = (ArrayList<SMPLStmtDefinition>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStmtDefinition b = (SMPLStmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                l.add(b);
                RESULT = l;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predExp ::= arithExp CMP arithExp 
            {
              ASTExp<SMPLExp> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> e1 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String cmp = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new CIRExp(e1,cmp,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("predExp",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // smplExp ::= arithExp 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // smplExp ::= exPair 
            {
              ASTExp<SMPLExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLPairExp p = (SMPLPairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = p;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // smplExp ::= vector 
            {
              ASTExp<SMPLExp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLVectorExp v = (SMPLVectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = v;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // smplExp ::= CHAR 
            {
              ASTExp<SMPLExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StringExp(c);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // smplExp ::= TRUE 
            {
              ASTExp<SMPLExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new BoolExp(t);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // smplExp ::= STRING_LITERAL 
            {
              ASTExp<SMPLExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StringExp(s);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // smplExp ::= FALSE 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new BoolExp(f);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // smplExp ::= funCall 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLFunCall f = (SMPLFunCall)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = f;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // smplExp ::= substr 
            {
              ASTExp<SMPLExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSubStrStmt s = (SMPLSubStrStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = s;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // smplExp ::= if 
            {
              ASTExp<SMPLExp> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLIfStmt i = (SMPLIfStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
               RESULT = i;
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // smplExp ::= let 
            {
              ASTExp<SMPLExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLLetStmt l = (SMPLLetStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
               RESULT = l;
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // smplExp ::= isPair 
            {
              ASTExp<SMPLExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLisPairStmt p = (SMPLisPairStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = p;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // smplExp ::= retVec 
            {
              ASTExp<SMPLExp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLRetVctStmt r = (SMPLRetVctStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = r;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // smplExp ::= size 
            {
              ASTExp<SMPLExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSizeStmt s = (SMPLSizeStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = s;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // smplExp ::= isEqual 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLIsEqualStmt e = (SMPLIsEqualStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = e;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // smplExp ::= isEqv 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLIsEqvStmt e = (SMPLIsEqvStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = e;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // smplExp ::= car 
            {
              ASTExp<SMPLExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLCarStmt c = (SMPLCarStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = c;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // smplExp ::= cdr 
            {
              ASTExp<SMPLExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLCdrStmt c = (SMPLCdrStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                 RESULT = c;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // smplExp ::= predExp 
            {
              ASTExp<SMPLExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> p = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = p;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<ASTExp<SMPLExp>> l = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    l.add(e);
                    RESULT = l;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // smplExpList ::= LIST LPAREN smplExpList RPAREN 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp<SMPLExp>> l = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = l;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // smplExpList ::= smplExp 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                  RESULT = new ArrayList<>();
                  RESULT.add(e);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // smplExpList ::= PROC LPAREN smplExpListE RPAREN 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp<SMPLExp>> args = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                    RESULT = args;
                 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // smplExpListE ::= smplExpList 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<ASTExp<SMPLExp>> lst = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = lst;
                 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // smplExpListE ::= empty 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		
                    RESULT = new ArrayList<>();
                 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exPair ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              SMPLPairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp<SMPLExp> e1 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e2 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new SMPLPairExp(e1,e2);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exPair",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vector ::= LBRACKET COLON smplExpList COLON RBRACKET 
            {
              SMPLVectorExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<ASTExp<SMPLExp>> l = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                            RESULT = new SMPLVectorExp(l);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vector",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithExp ::= arithExp PLUS arithTerm 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> t = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<SMPLExp>("+", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithExp ::= arithExp MINUS arithTerm 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> t = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<SMPLExp>("-", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithExp ::= arithTerm 
            {
              ASTExp<SMPLExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> t = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              ASTExp<SMPLExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> t = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> f = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<SMPLExp>("*", t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithTerm ::= arithTerm DIV arithFactor 
            {
              ASTExp<SMPLExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> t = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> f = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<SMPLExp>("/", t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithTerm ::= arithTerm MOD arithFactor 
            {
              ASTExp<SMPLExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> t = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> f = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<SMPLExp>("%", t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithTerm ::= arithFactor 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> f = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithConstFactor ::= INTEGER 
            {
              ASTExp<SMPLExp> RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithConstFactor ::= FRACTION 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fracleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fracright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double frac = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpFrac(frac); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithConstFactor ::= HEX 
            {
              ASTExp<SMPLExp> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(h); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithConstFactor ::= BIN 
            {
              ASTExp<SMPLExp> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithConstFactor ::= LPAREN arithExp RPAREN 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithFactor ::= arithConstFactor 
            {
              ASTExp<SMPLExp> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> cf = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cf; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithFactor ::= VAR SEMI 
            {
              ASTExp<SMPLExp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithFactor ::= MINUS arithFactor 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<SMPLExp> f = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		      RESULT = new ASTUnaryExp<SMPLExp>("-", f);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcDef ::= DEF VAR PROC LPAREN idListE RPAREN LBRACE stmtList RBRACE 
            {
              SMPLFunDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLStmtSequence body = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                     RESULT = new SMPLFunDef(id,lst,body);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funcDef",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-8)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // car ::= CAR LPAREN existingPair RPAREN 
            {
              SMPLCarStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLPair p = (SMPLPair)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLCarStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("car",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cdr ::= CDR LPAREN existingPair RPAREN 
            {
              SMPLCdrStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLPair p = (SMPLPair)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLCdrStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdr",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // isPair ::= IFPAIR LPAREN existingPair RPAREN 
            {
              SMPLisPairStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLPair p = (SMPLPair)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLisPairStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isPair",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // retVec ::= existingVector LBRACKET INTEGER RBRACKET 
            {
              SMPLRetVctStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SMPLVector v = (SMPLVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLRetVctStmt(v,i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("retVec",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // size ::= SIZE LPAREN existingVector RPAREN 
            {
              SMPLSizeStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLVector v = (SMPLVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLSizeStmt(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("size",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // isEqual ::= IFEQUAL LPAREN smplExp COMMA smplExp RPAREN 
            {
              SMPLIsEqualStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e2 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLIsEqualStmt(e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqual",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // isEqv ::= IFEQUIVALENT LPAREN smplExp COMMA smplExp RPAREN 
            {
              SMPLIsEqvStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e2 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLIsEqvStmt(e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqv",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // substr ::= SUBSTRING LPAREN STRING_LITERAL COMMA INTEGER COMMA INTEGER RPAREN 
            {
              SMPLSubStrStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLSubStrStmt(s,start,end); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substr",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print ::= PRINT LPAREN smplExp RPAREN 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new SMPLPrintStmt(e,false);
          
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print ::= PRINTLN LPAREN smplExp RPAREN 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new SMPLPrintStmt(e,true);
          
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // read ::= READ LPAREN RPAREN 
            {
              SMPLReadStmt RESULT =null;
		
                RESULT = new SMPLReadStmt(false);
         
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // read ::= READINT LPAREN RPAREN 
            {
              SMPLReadStmt RESULT =null;
		
                RESULT = new SMPLReadStmt(true);
         
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if ::= IF predExp THEN stmtList 
            {
              SMPLIfStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> p = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStmtSequence cons = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new SMPLIfStmt(p,cons);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if ::= IF predExp THEN stmtList ELSE stmtList 
            {
              SMPLIfStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ASTExp<SMPLExp> p = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SMPLStmtSequence cons = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStmtSequence alt = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new SMPLIfStmt(p,cons,alt);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // casestmt ::= predExp COLON stmt 
            {
              SMPLCaseStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<SMPLExp> p = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new SMPLCaseStmt(p,s);
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casestmt",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // caseList ::= caseList COMMA casestmt 
            {
              ArrayList<SMPLCaseStmt> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLCaseStmt> l = (ArrayList<SMPLCaseStmt>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLCaseStmt c = (SMPLCaseStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseList",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // caseFunc ::= CASE LBRACE caseList COMMA ELSE stmt RBRACE 
            {
              SMPLCaseFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<SMPLCaseStmt> lst = (ArrayList<SMPLCaseStmt>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new SMPLCaseFunction(lst,s);
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseFunc",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // let ::= LET LPAREN bindList RPAREN stmtList 
            {
              SMPLLetStmt RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLStmtDefinition> ids = (ArrayList<SMPLStmtDefinition>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStmtSequence body = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new SMPLLetStmt(ids,body);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("let",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // let ::= LET LPAREN binding RPAREN stmtList 
            {
              SMPLLetStmt RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SMPLStmtDefinition ids = (SMPLStmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStmtSequence body = (SMPLStmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new SMPLLetStmt(ids,body);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("let",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funCall ::= CALL LPAREN VAR COMMA smplExpList RPAREN 
            {
              SMPLFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp<SMPLExp>> args = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new SMPLFunCall(fn, args);
               
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funCall ::= VAR LPAREN smplExpList RPAREN 
            {
              SMPLFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp<SMPLExp>> args = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                   RESULT = new SMPLFunCall(fn, args);
               
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lazy ::= LAZY LPAREN smplExp RPAREN 
            {
              SMPLLazyStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLLazyStmt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazy",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // idList ::= idList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    lst.add(id);
		    RESULT = lst;
		    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // idList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new ArrayList<>();
				RESULT.add(id);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // idListE ::= idList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // idListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
