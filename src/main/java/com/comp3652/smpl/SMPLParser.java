
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.comp3652.smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\032\010\000\002\005\006\000\002\006" +
    "\006\000\002\007\006\000\002\033\007\000\002\011\006" +
    "\000\002\012\006\000\002\013\010\000\002\014\010\000" +
    "\002\015\012\000\002\024\007\000\002\010\006\000\002" +
    "\010\006\000\002\017\005\000\002\017\005\000\002\034" +
    "\006\000\002\034\010\000\002\036\011\000\002\035\007" +
    "\000\002\021\013\000\002\022\006\000\002\022\005\000" +
    "\002\022\010\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\016\006\000\002\025\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\006\000\002\023" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\005\000\002\031\003\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\066\004\063\005\055\006\037\007\017\010" +
    "\023\011\061\012\032\015\026\016\015\017\044\020\033" +
    "\021\066\022\025\023\052\024\013\025\016\026\042\027" +
    "\007\030\057\032\006\033\011\035\024\040\050\054\021" +
    "\055\054\062\051\001\002\000\004\002\273\001\002\000" +
    "\004\042\ufff6\001\002\000\004\035\264\001\002\000\004" +
    "\035\257\001\002\000\032\013\uffc2\014\uffc2\033\120\034" +
    "\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\046\uffc2\047\uffc2\001\002\000\004\043\131\001\002\000" +
    "\070\002\000\004\063\005\055\006\037\007\017\010\023" +
    "\011\061\012\032\015\026\016\015\017\044\020\033\021" +
    "\066\022\025\023\052\024\013\025\016\026\042\027\007" +
    "\030\057\032\006\033\011\035\024\040\050\054\021\055" +
    "\054\062\051\001\002\000\004\035\255\001\002\000\004" +
    "\042\254\001\002\000\004\035\251\001\002\000\004\040" +
    "\243\001\002\000\004\035\240\001\002\000\036\013\uffd9" +
    "\014\uffd9\034\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\001\002\000\036\013\uffbd\014\uffbd\034\uffbd\036\uffbd\037" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\001\002\000\036\013\uffd6\014" +
    "\uffd6\034\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\001" +
    "\002\000\004\035\235\001\002\000\052\007\017\010\023" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\026\042\027\007\030\057\032\006\033\011" +
    "\035\024\040\050\054\021\055\054\062\072\001\002\000" +
    "\004\035\230\001\002\000\044\007\017\010\023\016\015" +
    "\020\033\021\066\022\025\023\052\024\013\026\042\027" +
    "\007\030\057\032\006\033\011\035\024\054\021\055\054" +
    "\062\072\001\002\000\004\042\ufffa\001\002\000\004\042" +
    "\ufff7\001\002\000\036\013\uffd7\014\uffd7\034\uffd7\036\uffd7" +
    "\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002\000\004\035\224" +
    "\001\002\000\004\035\217\001\002\000\036\013\uffd4\014" +
    "\uffd4\034\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\001" +
    "\002\000\036\013\uffbb\014\uffbb\034\uffbb\036\uffbb\037\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\001\002\000\030\013\uffc3\014\uffc3" +
    "\034\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\046\uffc3\047\uffc3\001\002\000\052\007\017\010\023" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\026\042\027\007\030\057\032\006\033\011" +
    "\035\024\040\050\054\021\055\054\062\072\001\002\000" +
    "\014\013\104\014\107\042\211\046\105\047\106\001\002" +
    "\000\004\042\ufff9\001\002\000\004\035\206\001\002\000" +
    "\036\013\uffc4\014\uffc4\034\uffc4\036\uffc4\037\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\113\051" +
    "\114\052\112\001\002\000\004\035\201\001\002\000\004" +
    "\042\ufff8\001\002\000\036\013\uffdd\014\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000\036\013" +
    "\uffdc\014\uffdc\034\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\001\002\000\054\007\017\010\023\015\026\016\015" +
    "\017\044\020\033\021\066\022\025\023\052\024\013\026" +
    "\042\027\007\030\057\031\077\032\006\033\074\035\024" +
    "\040\050\054\021\055\054\062\072\001\002\000\026\013" +
    "\uffbc\014\uffbc\035\073\042\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\175\001\002\000\004\035\173\001" +
    "\002\000\036\013\uffd8\014\uffd8\034\uffd8\036\uffd8\037\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\001\002\000\036\013\uffb9\014\uffb9" +
    "\034\uffb9\036\uffb9\037\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\004\036\167\001\002\000\004\042\ufff5\001\002\000" +
    "\004\035\162\001\002\000\036\013\uffda\014\uffda\034\uffda" +
    "\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda\044\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\001\002\000\004" +
    "\035\156\001\002\000\036\013\uffdb\014\uffdb\034\uffdb\036" +
    "\uffdb\037\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\001\002\000\004\062" +
    "\140\001\002\000\036\013\uffd5\014\uffd5\034\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\001\002\000\036\013\uffbe" +
    "\014\uffbe\034\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\001\002\000\004\035\070\001\002\000\076\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\032\ufffe" +
    "\033\ufffe\035\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\054" +
    "\ufffe\055\ufffe\062\ufffe\001\002\000\052\007\017\010\023" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\026\042\027\007\030\057\032\006\033\011" +
    "\035\024\040\050\054\021\055\054\062\072\001\002\000" +
    "\014\013\104\014\107\036\137\046\105\047\106\001\002" +
    "\000\040\013\uffbc\014\uffbc\034\uffbc\035\073\036\uffbc\037" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\001\002\000\056\007\017\010" +
    "\023\015\026\016\015\017\044\020\033\021\066\022\025" +
    "\023\052\024\013\026\042\027\007\030\057\031\077\032" +
    "\006\033\074\035\024\036\075\040\050\054\021\055\054" +
    "\062\072\001\002\000\056\007\017\010\023\015\026\016" +
    "\015\017\044\020\033\021\066\022\025\023\052\024\013" +
    "\026\042\027\007\030\057\031\077\032\006\033\074\035" +
    "\024\040\050\043\131\054\021\055\054\062\072\001\002" +
    "\000\036\013\uffdf\014\uffdf\034\uffdf\036\uffdf\037\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\001\002\000\024\013\104\014\107\034" +
    "\uffcd\036\uffcd\037\uffcd\041\uffcd\043\uffcd\046\105\047\106" +
    "\001\002\000\004\035\126\001\002\000\006\036\102\037" +
    "\101\001\002\000\052\007\017\010\023\015\026\016\015" +
    "\017\044\020\033\021\066\022\025\023\052\024\013\026" +
    "\042\027\007\030\057\032\006\033\011\035\024\040\050" +
    "\054\021\055\054\062\072\001\002\000\036\013\uffe0\014" +
    "\uffe0\034\uffe0\036\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\001" +
    "\002\000\024\013\104\014\107\034\uffce\036\uffce\037\uffce" +
    "\041\uffce\043\uffce\046\105\047\106\001\002\000\044\007" +
    "\017\010\023\016\015\020\033\021\066\022\025\023\052" +
    "\024\013\026\042\027\007\030\057\032\006\033\011\035" +
    "\024\054\021\055\054\062\072\001\002\000\044\007\017" +
    "\010\023\016\015\020\033\021\066\022\025\023\052\024" +
    "\013\026\042\027\007\030\057\032\006\033\011\035\024" +
    "\054\021\055\054\062\072\001\002\000\044\007\017\010" +
    "\023\016\015\020\033\021\066\022\025\023\052\024\013" +
    "\026\042\027\007\030\057\032\006\033\011\035\024\054" +
    "\021\055\054\062\072\001\002\000\044\007\017\010\023" +
    "\016\015\020\033\021\066\022\025\023\052\024\013\026" +
    "\042\027\007\030\057\032\006\033\011\035\024\054\021" +
    "\055\054\062\072\001\002\000\004\033\120\001\002\000" +
    "\036\013\uffc6\014\uffc6\034\uffc6\036\uffc6\037\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6\050\113\051" +
    "\114\052\112\001\002\000\044\007\017\010\023\016\015" +
    "\020\033\021\066\022\025\023\052\024\013\026\042\027" +
    "\007\030\057\032\006\033\011\035\024\054\021\055\054" +
    "\062\072\001\002\000\044\007\017\010\023\016\015\020" +
    "\033\021\066\022\025\023\052\024\013\026\042\027\007" +
    "\030\057\032\006\033\011\035\024\054\021\055\054\062" +
    "\072\001\002\000\044\007\017\010\023\016\015\020\033" +
    "\021\066\022\025\023\052\024\013\026\042\027\007\030" +
    "\057\032\006\033\011\035\024\054\021\055\054\062\072" +
    "\001\002\000\036\013\uffc0\014\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\001\002\000\036\013\uffc1\014" +
    "\uffc1\034\uffc1\036\uffc1\037\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\001" +
    "\002\000\036\013\uffbf\014\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\001\002\000\004\054\121\001\002" +
    "\000\004\034\122\001\002\000\036\013\uffef\014\uffef\034" +
    "\uffef\036\uffef\037\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\001\002\000" +
    "\036\013\uffc8\014\uffc8\034\uffc8\036\uffc8\037\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\113\051" +
    "\114\052\112\001\002\000\036\013\uffc9\014\uffc9\034\uffc9" +
    "\036\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046" +
    "\uffc9\047\uffc9\050\113\051\114\052\112\001\002\000\036" +
    "\013\uffc7\014\uffc7\034\uffc7\036\uffc7\037\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\046\uffc7\047\uffc7\050\113\051\114" +
    "\052\112\001\002\000\054\007\017\010\023\015\026\016" +
    "\015\017\044\020\033\021\066\022\025\023\052\024\013" +
    "\026\042\027\007\030\057\031\077\032\006\033\074\035" +
    "\024\040\050\054\021\055\054\062\072\001\002\000\006" +
    "\036\130\037\101\001\002\000\014\034\uffcc\036\uffcc\037" +
    "\uffcc\041\uffcc\043\uffcc\001\002\000\054\007\017\010\023" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\026\042\027\007\030\057\031\077\032\006" +
    "\033\074\035\024\040\050\054\021\055\054\062\072\001" +
    "\002\000\006\034\133\037\101\001\002\000\014\034\uffcb" +
    "\036\uffcb\037\uffcb\041\uffcb\043\uffcb\001\002\000\006\037" +
    "\101\043\135\001\002\000\004\034\136\001\002\000\032" +
    "\013\ufff0\014\ufff0\033\ufff0\034\ufff0\036\ufff0\037\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\001\002" +
    "\000\036\013\uffe9\014\uffe9\034\uffe9\036\uffe9\037\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\001\002\000\004\011\141\001\002\000" +
    "\004\035\142\001\002\000\006\036\uffb8\062\146\001\002" +
    "\000\006\036\uffd0\037\154\001\002\000\004\036\uffcf\001" +
    "\002\000\004\036\147\001\002\000\010\035\uffd1\036\uffd1" +
    "\037\uffd1\001\002\000\004\040\150\001\002\000\066\004" +
    "\063\005\055\006\037\007\017\010\023\011\061\012\032" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\025\016\026\042\027\007\030\057\032\006" +
    "\033\011\035\024\040\050\054\021\055\054\062\051\001" +
    "\002\000\070\004\063\005\055\006\037\007\017\010\023" +
    "\011\061\012\032\015\026\016\015\017\044\020\033\021" +
    "\066\022\025\023\052\024\013\025\016\026\042\027\007" +
    "\030\057\032\006\033\011\035\024\040\050\041\152\054" +
    "\021\055\054\062\051\001\002\000\004\042\uffe1\001\002" +
    "\000\076\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\032\uffff\033\uffff\035\uffff\040\uffff\041\uffff" +
    "\042\uffff\045\uffff\054\uffff\055\uffff\062\uffff\001\002\000" +
    "\004\062\155\001\002\000\010\035\uffd2\036\uffd2\037\uffd2" +
    "\001\002\000\004\062\146\001\002\000\006\036\160\037" +
    "\154\001\002\000\066\004\063\005\055\006\037\007\017" +
    "\010\023\011\061\012\032\015\026\016\015\017\044\020" +
    "\033\021\066\022\025\023\052\024\013\025\016\026\042" +
    "\027\007\030\057\032\006\033\011\035\024\040\050\054" +
    "\021\055\054\062\051\001\002\000\070\004\063\005\055" +
    "\006\037\007\017\010\023\011\061\012\032\015\026\016" +
    "\015\017\044\020\033\021\066\022\025\023\052\024\013" +
    "\025\016\026\042\027\007\030\057\032\006\033\011\035" +
    "\024\040\050\042\uffea\054\021\055\054\062\051\001\002" +
    "\000\052\007\017\010\023\015\026\016\015\017\044\020" +
    "\033\021\066\022\025\023\052\024\013\026\042\027\007" +
    "\030\057\032\006\033\011\035\024\040\050\054\021\055" +
    "\054\062\072\001\002\000\014\013\104\014\107\037\164" +
    "\046\105\047\106\001\002\000\052\007\017\010\023\015" +
    "\026\016\015\017\044\020\033\021\066\022\025\023\052" +
    "\024\013\026\042\027\007\030\057\032\006\033\011\035" +
    "\024\040\050\054\021\055\054\062\072\001\002\000\014" +
    "\013\104\014\107\036\166\046\105\047\106\001\002\000" +
    "\036\013\uffed\014\uffed\034\uffed\036\uffed\037\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\001\002\000\004\062\146\001\002\000\006" +
    "\035\171\037\154\001\002\000\066\004\063\005\055\006" +
    "\037\007\017\010\023\011\061\012\032\015\026\016\015" +
    "\017\044\020\033\021\066\022\025\023\052\024\013\025" +
    "\016\026\042\027\007\030\057\032\006\033\011\035\024" +
    "\040\050\054\021\055\054\062\051\001\002\000\070\004" +
    "\063\005\055\006\037\007\017\010\023\011\061\012\032" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\025\016\026\042\027\007\030\057\032\006" +
    "\033\011\035\024\040\050\042\uffe2\054\021\055\054\062" +
    "\051\001\002\000\004\036\174\001\002\000\036\013\uffe7" +
    "\014\uffe7\034\uffe7\036\uffe7\037\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\001\002\000\052\007\017\010\023\015\026\016\015\017" +
    "\044\020\033\021\066\022\025\023\052\024\013\026\042" +
    "\027\007\030\057\032\006\033\011\035\024\040\050\054" +
    "\021\055\054\062\072\001\002\000\014\013\104\014\107" +
    "\042\ufffb\046\105\047\106\001\002\000\006\037\101\041" +
    "\200\001\002\000\030\013\uffca\014\uffca\034\uffca\036\uffca" +
    "\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca\046\uffca\047" +
    "\uffca\001\002\000\052\007\017\010\023\015\026\016\015" +
    "\017\044\020\033\021\066\022\025\023\052\024\013\026" +
    "\042\027\007\030\057\032\006\033\011\035\024\040\050" +
    "\054\021\055\054\062\072\001\002\000\014\013\104\014" +
    "\107\037\203\046\105\047\106\001\002\000\052\007\017" +
    "\010\023\015\026\016\015\017\044\020\033\021\066\022" +
    "\025\023\052\024\013\026\042\027\007\030\057\032\006" +
    "\033\011\035\024\040\050\054\021\055\054\062\072\001" +
    "\002\000\014\013\104\014\107\036\205\046\105\047\106" +
    "\001\002\000\030\013\ufff4\014\ufff4\034\ufff4\036\ufff4\037" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4" +
    "\001\002\000\004\033\011\001\002\000\004\036\210\001" +
    "\002\000\036\013\uffee\014\uffee\034\uffee\036\uffee\037\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\001\002\000\076\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033" +
    "\ufffc\035\ufffc\040\ufffc\041\ufffc\042\ufffc\045\ufffc\054\ufffc" +
    "\055\ufffc\062\ufffc\001\002\000\014\013\104\014\107\044" +
    "\213\046\105\047\106\001\002\000\066\004\063\005\055" +
    "\006\037\007\017\010\023\011\061\012\032\015\026\016" +
    "\015\017\044\020\033\021\066\022\025\023\052\024\013" +
    "\025\016\026\042\027\007\030\057\032\006\033\011\035" +
    "\024\040\050\054\021\055\054\062\051\001\002\000\072" +
    "\004\063\005\055\006\037\007\017\010\023\011\061\012" +
    "\032\015\026\016\015\017\044\020\033\021\066\022\025" +
    "\023\052\024\013\025\016\026\042\027\007\030\057\032" +
    "\006\033\011\035\024\040\050\042\uffe5\045\215\054\021" +
    "\055\054\062\051\001\002\000\066\004\063\005\055\006" +
    "\037\007\017\010\023\011\061\012\032\015\026\016\015" +
    "\017\044\020\033\021\066\022\025\023\052\024\013\025" +
    "\016\026\042\027\007\030\057\032\006\033\011\035\024" +
    "\040\050\054\021\055\054\062\051\001\002\000\070\004" +
    "\063\005\055\006\037\007\017\010\023\011\061\012\032" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\025\016\026\042\027\007\030\057\032\006" +
    "\033\011\035\024\040\050\042\uffe4\054\021\055\054\062" +
    "\051\001\002\000\004\062\220\001\002\000\004\037\221" +
    "\001\002\000\054\007\017\010\023\015\026\016\015\017" +
    "\044\020\033\021\066\022\025\023\052\024\013\026\042" +
    "\027\007\030\057\031\077\032\006\033\074\035\024\040" +
    "\050\054\021\055\054\062\072\001\002\000\006\036\223" +
    "\037\101\001\002\000\036\013\uffde\014\uffde\034\uffde\036" +
    "\uffde\037\uffde\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\001\002\000\052\007" +
    "\017\010\023\015\026\016\015\017\044\020\033\021\066" +
    "\022\025\023\052\024\013\026\042\027\007\030\057\032" +
    "\006\033\011\035\024\040\050\054\021\055\054\062\072" +
    "\001\002\000\014\013\104\014\107\036\226\046\105\047" +
    "\106\001\002\000\004\042\uffd3\001\002\000\036\013\uffc5" +
    "\014\uffc5\034\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\046\uffc5\047\uffc5\050\113\051\114\052\112" +
    "\001\002\000\052\007\017\010\023\015\026\016\015\017" +
    "\044\020\033\021\066\022\025\023\052\024\013\026\042" +
    "\027\007\030\057\032\006\033\011\035\024\040\050\054" +
    "\021\055\054\062\072\001\002\000\014\013\104\014\107" +
    "\036\232\046\105\047\106\001\002\000\036\013\uffe8\014" +
    "\uffe8\034\uffe8\036\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\001" +
    "\002\000\014\013\104\014\107\036\234\046\105\047\106" +
    "\001\002\000\036\013\uffba\014\uffba\034\uffba\036\uffba\037" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\001\002\000\004\017\044\001" +
    "\002\000\004\036\237\001\002\000\036\013\ufff2\014\ufff2" +
    "\034\ufff2\036\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\001\002" +
    "\000\004\017\044\001\002\000\004\036\242\001\002\000" +
    "\036\013\ufff3\014\ufff3\034\ufff3\036\ufff3\037\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\001\002\000\054\007\017\010\023\015\026" +
    "\016\015\017\044\020\033\021\066\022\025\023\052\024" +
    "\013\026\042\027\007\030\057\031\077\032\006\033\074" +
    "\035\024\040\050\054\021\055\054\062\072\001\002\000" +
    "\006\037\101\041\245\001\002\000\052\007\017\010\023" +
    "\015\026\016\015\017\044\020\033\021\066\022\025\023" +
    "\052\024\013\026\042\027\007\030\057\032\006\033\011" +
    "\035\024\040\050\054\021\055\054\062\072\001\002\000" +
    "\014\013\104\014\107\043\247\046\105\047\106\001\002" +
    "\000\052\007\017\010\023\015\026\016\015\017\044\020" +
    "\033\021\066\022\025\023\052\024\013\026\042\027\007" +
    "\030\057\032\006\033\011\035\024\040\050\054\021\055" +
    "\054\062\072\001\002\000\014\013\104\014\107\042\uffe3" +
    "\046\105\047\106\001\002\000\004\017\044\001\002\000" +
    "\004\036\253\001\002\000\036\013\ufff1\014\ufff1\034\ufff1" +
    "\036\ufff1\037\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\001\002\000\076" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\032\ufffd\033\ufffd\035\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\045\ufffd\054\ufffd\055\ufffd\062\ufffd\001\002\000\004\036" +
    "\256\001\002\000\036\013\uffe6\014\uffe6\034\uffe6\036\uffe6" +
    "\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000\052\007\017" +
    "\010\023\015\026\016\015\017\044\020\033\021\066\022" +
    "\025\023\052\024\013\026\042\027\007\030\057\032\006" +
    "\033\011\035\024\040\050\054\021\055\054\062\072\001" +
    "\002\000\014\013\104\014\107\037\261\046\105\047\106" +
    "\001\002\000\052\007\017\010\023\015\026\016\015\017" +
    "\044\020\033\021\066\022\025\023\052\024\013\026\042" +
    "\027\007\030\057\032\006\033\011\035\024\040\050\054" +
    "\021\055\054\062\072\001\002\000\014\013\104\014\107" +
    "\036\263\046\105\047\106\001\002\000\036\013\uffec\014" +
    "\uffec\034\uffec\036\uffec\037\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\001" +
    "\002\000\004\063\265\001\002\000\004\037\266\001\002" +
    "\000\004\054\267\001\002\000\004\037\270\001\002\000" +
    "\004\054\271\001\002\000\004\036\272\001\002\000\036" +
    "\013\uffeb\014\uffeb\034\uffeb\036\uffeb\037\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\066\002\003\003\011\004\066\005\045\006" +
    "\046\007\061\010\063\011\057\012\017\013\052\014\030" +
    "\015\021\016\004\017\033\020\013\021\026\022\034\024" +
    "\040\027\037\030\042\031\064\032\035\033\007\034\044" +
    "\035\027\036\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\152\005\045\006\046\007" +
    "\061\010\063\011\057\012\017\013\052\014\030\015\021" +
    "\016\004\017\033\020\013\021\026\022\034\024\040\027" +
    "\037\030\042\031\064\032\035\033\007\034\044\035\027" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\045\006\046\007\061\010\063\011\057" +
    "\012\017\013\052\014\030\015\021\017\033\022\034\027" +
    "\232\030\042\031\064\032\035\033\007\001\001\000\002" +
    "\001\001\000\036\005\045\006\046\007\061\010\063\011" +
    "\057\012\017\013\052\014\030\015\021\017\033\022\034" +
    "\030\226\031\064\033\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\045\006\046\007\061\010\063\011\057" +
    "\012\017\013\052\014\030\015\021\017\033\022\034\027" +
    "\211\030\042\031\064\032\035\033\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\045\006\046\007\061\010" +
    "\063\011\057\012\017\013\052\014\030\015\021\017\033" +
    "\022\034\023\176\027\075\030\042\031\064\032\035\033" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\045\006\046\007\061\010\063\011\057\012\017\013" +
    "\052\014\030\015\021\017\033\022\034\027\070\030\042" +
    "\031\064\032\035\033\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\045\006\046\007\061\010\063" +
    "\011\057\012\017\013\052\014\030\015\021\017\033\022" +
    "\034\023\077\027\075\030\042\031\064\032\035\033\007" +
    "\001\001\000\044\005\045\006\046\007\061\010\063\011" +
    "\057\012\017\013\052\014\030\015\021\017\033\022\034" +
    "\023\131\027\075\030\042\031\064\032\035\033\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\045\006\046\007\061\010" +
    "\063\011\057\012\017\013\052\014\030\015\021\017\033" +
    "\022\034\027\102\030\042\031\064\032\035\033\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\045" +
    "\006\046\007\061\010\063\011\057\012\017\013\052\014" +
    "\030\015\021\017\033\022\034\030\124\031\064\033\107" +
    "\001\001\000\036\005\045\006\046\007\061\010\063\011" +
    "\057\012\017\013\052\014\030\015\021\017\033\022\034" +
    "\030\123\031\064\033\107\001\001\000\036\005\045\006" +
    "\046\007\061\010\063\011\057\012\017\013\052\014\030" +
    "\015\021\017\033\022\034\030\122\031\064\033\107\001" +
    "\001\000\036\005\045\006\046\007\061\010\063\011\057" +
    "\012\017\013\052\014\030\015\021\017\033\022\034\030" +
    "\110\031\064\033\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\045\006\046\007\061\010\063\011" +
    "\057\012\017\013\052\014\030\015\021\017\033\022\034" +
    "\031\116\033\107\001\001\000\034\005\045\006\046\007" +
    "\061\010\063\011\057\012\017\013\052\014\030\015\021" +
    "\017\033\022\034\031\115\033\107\001\001\000\034\005" +
    "\045\006\046\007\061\010\063\011\057\012\017\013\052" +
    "\014\030\015\021\017\033\022\034\031\114\033\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\045\006\046\007\061\010\063\011\057\012\017\013" +
    "\052\014\030\015\021\017\033\022\034\023\126\027\075" +
    "\030\042\031\064\032\035\033\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\045\006\046\007\061" +
    "\010\063\011\057\012\017\013\052\014\030\015\021\017" +
    "\033\022\034\023\133\027\075\030\042\031\064\032\035" +
    "\033\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\142\026\144\037\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\150\004\066\005\045\006\046\007\061" +
    "\010\063\011\057\012\017\013\052\014\030\015\021\016" +
    "\004\017\033\020\013\021\026\022\034\024\040\027\037" +
    "\030\042\031\064\032\035\033\007\034\044\035\027\036" +
    "\055\001\001\000\062\004\152\005\045\006\046\007\061" +
    "\010\063\011\057\012\017\013\052\014\030\015\021\016" +
    "\004\017\033\020\013\021\026\022\034\024\040\027\037" +
    "\030\042\031\064\032\035\033\007\034\044\035\027\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\156\001\001\000" +
    "\002\001\001\000\064\003\160\004\066\005\045\006\046" +
    "\007\061\010\063\011\057\012\017\013\052\014\030\015" +
    "\021\016\004\017\033\020\013\021\026\022\034\024\040" +
    "\027\037\030\042\031\064\032\035\033\007\034\044\035" +
    "\027\036\055\001\001\000\062\004\152\005\045\006\046" +
    "\007\061\010\063\011\057\012\017\013\052\014\030\015" +
    "\021\016\004\017\033\020\013\021\026\022\034\024\040" +
    "\027\037\030\042\031\064\032\035\033\007\034\044\035" +
    "\027\036\055\001\001\000\042\005\045\006\046\007\061" +
    "\010\063\011\057\012\017\013\052\014\030\015\021\017" +
    "\033\022\034\027\162\030\042\031\064\032\035\033\007" +
    "\001\001\000\002\001\001\000\042\005\045\006\046\007" +
    "\061\010\063\011\057\012\017\013\052\014\030\015\021" +
    "\017\033\022\034\027\164\030\042\031\064\032\035\033" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\167\001\001\000\002\001\001\000\064\003\171\004" +
    "\066\005\045\006\046\007\061\010\063\011\057\012\017" +
    "\013\052\014\030\015\021\016\004\017\033\020\013\021" +
    "\026\022\034\024\040\027\037\030\042\031\064\032\035" +
    "\033\007\034\044\035\027\036\055\001\001\000\062\004" +
    "\152\005\045\006\046\007\061\010\063\011\057\012\017" +
    "\013\052\014\030\015\021\016\004\017\033\020\013\021" +
    "\026\022\034\024\040\027\037\030\042\031\064\032\035" +
    "\033\007\034\044\035\027\036\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\045\006\046\007\061" +
    "\010\063\011\057\012\017\013\052\014\030\015\021\017" +
    "\033\022\034\027\175\030\042\031\064\032\035\033\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\045\006\046\007\061\010\063\011\057" +
    "\012\017\013\052\014\030\015\021\017\033\022\034\027" +
    "\201\030\042\031\064\032\035\033\007\001\001\000\002" +
    "\001\001\000\042\005\045\006\046\007\061\010\063\011" +
    "\057\012\017\013\052\014\030\015\021\017\033\022\034" +
    "\027\203\030\042\031\064\032\035\033\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\213\004\066\005\045\006\046" +
    "\007\061\010\063\011\057\012\017\013\052\014\030\015" +
    "\021\016\004\017\033\020\013\021\026\022\034\024\040" +
    "\027\037\030\042\031\064\032\035\033\007\034\044\035" +
    "\027\036\055\001\001\000\062\004\152\005\045\006\046" +
    "\007\061\010\063\011\057\012\017\013\052\014\030\015" +
    "\021\016\004\017\033\020\013\021\026\022\034\024\040" +
    "\027\037\030\042\031\064\032\035\033\007\034\044\035" +
    "\027\036\055\001\001\000\064\003\215\004\066\005\045" +
    "\006\046\007\061\010\063\011\057\012\017\013\052\014" +
    "\030\015\021\016\004\017\033\020\013\021\026\022\034" +
    "\024\040\027\037\030\042\031\064\032\035\033\007\034" +
    "\044\035\027\036\055\001\001\000\062\004\152\005\045" +
    "\006\046\007\061\010\063\011\057\012\017\013\052\014" +
    "\030\015\021\016\004\017\033\020\013\021\026\022\034" +
    "\024\040\027\037\030\042\031\064\032\035\033\007\034" +
    "\044\035\027\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\045\006\046\007\061\010\063\011" +
    "\057\012\017\013\052\014\030\015\021\017\033\022\034" +
    "\023\221\027\075\030\042\031\064\032\035\033\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\045" +
    "\006\046\007\061\010\063\011\057\012\017\013\052\014" +
    "\030\015\021\017\033\022\034\027\224\030\042\031\064" +
    "\032\035\033\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\045\006\046\007\061" +
    "\010\063\011\057\012\017\013\052\014\030\015\021\017" +
    "\033\022\034\027\230\030\042\031\064\032\035\033\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\005\045\006\046" +
    "\007\061\010\063\011\057\012\017\013\052\014\030\015" +
    "\021\017\033\022\034\023\243\027\075\030\042\031\064" +
    "\032\035\033\007\001\001\000\002\001\001\000\042\005" +
    "\045\006\046\007\061\010\063\011\057\012\017\013\052" +
    "\014\030\015\021\017\033\022\034\027\245\030\042\031" +
    "\064\032\035\033\007\001\001\000\002\001\001\000\042" +
    "\005\045\006\046\007\061\010\063\011\057\012\017\013" +
    "\052\014\030\015\021\017\033\022\034\027\247\030\042" +
    "\031\064\032\035\033\007\001\001\000\002\001\001\000" +
    "\004\032\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\045\006\046\007\061\010\063\011\057\012\017" +
    "\013\052\014\030\015\021\017\033\022\034\027\257\030" +
    "\042\031\064\032\035\033\007\001\001\000\002\001\001" +
    "\000\042\005\045\006\046\007\061\010\063\011\057\012" +
    "\017\013\052\014\030\015\021\017\033\022\034\027\261" +
    "\030\042\031\064\032\035\033\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= funDefn 
            {
              StmtDefinition RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtFnDefinition d = (StmtFnDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= proc 
            {
              StmtDefinition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= if 
            {
              StmtDefinition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IfStmt i = (IfStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definition ::= let 
            {
              StmtDefinition RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		LetStmt l = (LetStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= lazy 
            {
              StmtDefinition RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		LazyStmt l = (LazyStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= case 
            {
              StmtDefinition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CaseStmt c = (CaseStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exPair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new exPair(e1,e2);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exPair",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // car ::= CAR LPAREN exPair RPAREN 
            {
              CarStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CarStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("car",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cdr ::= CDR LPAREN exPair RPAREN 
            {
              CdrStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CdrStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdr",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // isPair ::= IFPAIR LPAREN exPair RPAREN 
            {
              IsPairStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsPairStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isPair",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vector ::= LBRACKET COLON expList COLON RBRACKET 
            {
              VectorExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new VectorExp(lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vector",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // retVec ::= vector LBRACKET INTEGER RBRACKET 
            {
              RetVctStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new retVectStmt(v,i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("retVec",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // size ::= SIZE LPAREN vector RPAREN 
            {
              SizeStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SizeStmt(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("size",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // isEqual ::= IFEQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqualStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsEqualStmt(e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqual",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // isEqv ::= IFEQUIVALENT LPAREN expression COMMA expression RPAREN 
            {
              IsEqvStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsEqvStmt(e1,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqv",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // substr ::= SUBSTRING LPAREN STRING COMMA INTEGER COMMA INTEGER RPAREN 
            {
              SubStrStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubStrStmt(s,start,end); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substr",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc ::= PROC LPAREN idList RPAREN stmtList 
            {
              ExpProcedure RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProcedure(lst,body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("proc",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // print ::= PRINT LPAREN expression RPAREN 
            {
              PrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new PrintStmt(e);
          
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              PrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintStmt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // read ::= READ LPAREN RPAREN 
            {
              ReadStmt RESULT =null;
		
                RESULT = new ReadStmt();
         
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // read ::= READINT LPAREN RPAREN 
            {
              ReadStmt RESULT =null;
		
                RESULT = new ReadStmt();
         
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF expression THEN stmtList 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new IfStmt(e,body);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF expression THEN stmtList ELSE stmtList 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int otherleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence other = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            body.add(other);
            RESULT = new IfStmt(e,body);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // case ::= CASE LBRACE expList RBRACE expression COLON expression 
            {
              CaseStmt RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CaseStmt(lst,e1,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // let ::= LET RPAREN idList LPAREN stmtList 
            {
              LetStmt RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LetStmt(ids,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("let",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funDefn ::= DEF VARIABLE PROC LPAREN idListE RPAREN LBRACE stmtList RBRACE 
            {
              StmtFnDefinition RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	    	RESULT = new StmtFnDefinition(name,body,p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDefn",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-8)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funCall ::= VARIABLE LPAREN expList RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	    	RESULT = new ExpFnCall(fn, args);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funCall ::= VARIABLE LPAREN RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
	    	RESULT = new ExpFnCall(fn, new ArrayList<Exp>());
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funCall ::= CALL LPAREN VARIABLE COMMA expList RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = new ExpFnCall(fn, args);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funCall ::= car 
            {
              ExpFnCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CarStmt c = (CarStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funCall ::= cdr 
            {
              ExpFnCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CdrStmt c = (CdrStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funCall ::= isPair 
            {
              ExpFnCall RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IsPairStmt p = (IsPairStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = p;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funCall ::= retVec 
            {
              ExpFnCall RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		RetVctStmt r = (RetVctStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = r;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funCall ::= size 
            {
              ExpFnCall RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SizeStmt s = (SizeStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funCall ::= isEqual 
            {
              ExpFnCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IsEqualStmt e = (IsEqualStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funCall ::= isEqv 
            {
              ExpFnCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IsEqvStmt e = (IsEqvStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funCall ::= substr 
            {
              ExpFnCall RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SubStrStmt s = (SubStrStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funCall ::= print 
            {
              ExpFnCall RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PrintStmt p = (PrintStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = p;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funCall ::= read 
            {
              ExpFnCall RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ReadStmt r = (ReadStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = r;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              LazyStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LazyStmt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazy",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idList ::= idList COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    l.add(v);
		    RESULT = l;
       	   
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // idList ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
       	   	    ArrayList<String> lst = new ArrayList<String>();
		    lst.add(v);
		    RESULT = lst;
	   
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // idListE ::= idList 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // idListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        lst.add(e);
	    	RESULT = lst;
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        ArrayList<Exp> lst = new ArrayList<Exp>();
		lst.add(e);
	    	RESULT = lst;
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expList ::= LIST LPAREN expList RPAREN 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = lst;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expList ::= LBRACKET expList RBRACKET 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LBRACE expList RBRACE 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new CompoundExp(l);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new ExpAdd(e, t);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression AND term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new CondExp(e,t);
		 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression OR term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new CondExp(e,t);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= NOT term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new NotExp(e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = t;
		    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= exPair 
            {
              Exp RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp ep = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = ep;
		    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= funCall 
            {
              Exp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpFnCall call = (ExpFnCall)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= FLOAT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
