
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.comp3652.smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\036\010\000\002\005\006\000\002\006\006\000\002" +
    "\007\006\000\002\037\007\000\002\012\006\000\002\013" +
    "\006\000\002\014\010\000\002\015\010\000\002\016\012" +
    "\000\002\026\007\000\002\023\013\000\002\024\006\000" +
    "\002\024\005\000\002\024\010\000\002\017\006\000\002" +
    "\031\005\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\027\007\000\002\030\005\000\002\030\003" +
    "\000\002\025\005\000\002\025\003\000\002\025\006\000" +
    "\002\025\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\005\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\022\004\016\005\020\012\021\020\027\021" +
    "\005\036\012\055\023\063\010\001\002\000\010\040\ufffa" +
    "\041\ufffa\043\ufffa\001\002\000\004\036\127\001\002\000" +
    "\004\043\126\001\002\000\020\035\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\043\uffd9\047\uffd9\050\uffd9\001\002\000\022\036" +
    "\050\043\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\101\001\002\000\004\002\125\001\002\000\016\005" +
    "\020\020\027\021\005\036\012\055\023\063\031\001\002" +
    "\000\010\040\ufff9\041\ufff9\043\ufff9\001\002\000\010\043" +
    "\122\047\034\050\035\001\002\000\026\035\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\043\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\001\002\000\004\063\110\001\002\000\026" +
    "\035\uffda\037\uffda\040\uffda\041\uffda\043\uffda\047\uffda\050" +
    "\uffda\051\040\052\041\053\037\001\002\000\010\004\016" +
    "\012\021\063\100\001\002\000\004\036\067\001\002\000" +
    "\026\035\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000\026\035" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\001\002\000\020\035\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\043\uffdb\047\uffdb\050\uffdb\001\002" +
    "\000\034\002\ufffe\004\ufffe\005\ufffe\012\ufffe\020\ufffe\021" +
    "\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\055\ufffe" +
    "\063\ufffe\001\002\000\024\002\000\004\016\005\020\012" +
    "\021\020\027\021\005\036\012\055\023\063\010\001\002" +
    "\000\004\036\030\001\002\000\016\005\020\020\027\021" +
    "\005\036\012\055\023\063\031\001\002\000\030\035\uffd3" +
    "\036\050\037\uffd3\040\uffd3\041\uffd3\043\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\001\002\000\010\040\033" +
    "\047\034\050\035\001\002\000\016\005\020\020\027\021" +
    "\005\036\012\055\023\063\031\001\002\000\012\021\005" +
    "\036\012\055\023\063\031\001\002\000\012\021\005\036" +
    "\012\055\023\063\031\001\002\000\026\035\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\043\uffdc\047\uffdc\050\uffdc\051\040\052" +
    "\041\053\037\001\002\000\012\021\005\036\012\055\023" +
    "\063\031\001\002\000\012\021\005\036\012\055\023\063" +
    "\031\001\002\000\012\021\005\036\012\055\023\063\031" +
    "\001\002\000\026\035\uffd7\037\uffd7\040\uffd7\041\uffd7\043" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002" +
    "\000\026\035\uffd8\037\uffd8\040\uffd8\041\uffd8\043\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002\000\026" +
    "\035\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\026\035\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\043\uffdd\047\uffdd\050\uffdd\051" +
    "\040\052\041\053\037\001\002\000\010\037\047\047\034" +
    "\050\035\001\002\000\020\035\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\043\ufff8\047\ufff8\050\ufff8\001\002\000\024\005\020" +
    "\020\027\021\005\032\051\034\055\036\012\037\053\055" +
    "\023\063\031\001\002\000\004\036\063\001\002\000\014" +
    "\035\uffe0\037\uffe0\040\uffe0\047\034\050\035\001\002\000" +
    "\026\035\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\006\037" +
    "\062\040\057\001\002\000\022\005\020\020\027\021\005" +
    "\032\051\034\055\036\012\055\023\063\031\001\002\000" +
    "\006\035\060\040\057\001\002\000\016\005\020\020\027" +
    "\021\005\036\012\055\023\063\031\001\002\000\010\035" +
    "\uffde\037\uffde\040\uffde\001\002\000\014\035\uffe1\037\uffe1" +
    "\040\uffe1\047\034\050\035\001\002\000\026\035\uffec\037" +
    "\uffec\040\uffec\041\uffec\043\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\001\002\000\022\005\020\020\027\021" +
    "\005\032\051\034\055\036\012\055\023\063\031\001\002" +
    "\000\006\037\065\040\057\001\002\000\010\035\uffdf\037" +
    "\uffdf\040\uffdf\001\002\000\034\002\uffff\004\uffff\005\uffff" +
    "\012\uffff\020\uffff\021\uffff\036\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\055\uffff\063\uffff\001\002\000\004\063\071" +
    "\001\002\000\006\037\073\040\072\001\002\000\006\037" +
    "\uffe7\040\uffe7\001\002\000\004\063\075\001\002\000\022" +
    "\004\016\005\020\012\021\020\027\021\005\036\012\055" +
    "\023\063\010\001\002\000\030\004\016\005\020\012\021" +
    "\020\027\021\005\036\012\040\uffee\041\uffee\043\uffee\055" +
    "\023\063\010\001\002\000\006\037\uffe8\040\uffe8\001\002" +
    "\000\006\040\106\041\uffe2\001\002\000\004\041\103\001" +
    "\002\000\004\054\101\001\002\000\016\005\020\020\027" +
    "\021\005\036\012\055\023\063\031\001\002\000\014\040" +
    "\ufffb\041\ufffb\043\ufffb\047\034\050\035\001\002\000\022" +
    "\004\016\005\020\012\021\020\027\021\005\036\012\055" +
    "\023\063\010\001\002\000\024\004\016\005\020\012\021" +
    "\020\027\021\005\036\012\042\105\055\023\063\010\001" +
    "\002\000\020\035\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4" +
    "\047\uffe4\050\uffe4\001\002\000\010\004\016\012\021\063" +
    "\100\001\002\000\004\041\uffe3\001\002\000\004\012\111" +
    "\001\002\000\004\036\112\001\002\000\006\037\uffd0\063" +
    "\071\001\002\000\006\037\uffe6\040\072\001\002\000\004" +
    "\037\uffe5\001\002\000\004\037\116\001\002\000\004\041" +
    "\117\001\002\000\022\004\016\005\020\012\021\020\027" +
    "\021\005\036\012\055\023\063\010\001\002\000\024\004" +
    "\016\005\020\012\021\020\027\021\005\036\012\042\121" +
    "\055\023\063\010\001\002\000\010\040\uffed\041\uffed\043" +
    "\uffed\001\002\000\034\002\ufffc\004\ufffc\005\ufffc\012\ufffc" +
    "\020\ufffc\021\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\055\ufffc\063\ufffc\001\002\000\010\037\124\047\034" +
    "\050\035\001\002\000\026\035\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\043\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\001\002\000\004\002\001\001\002\000\034\002\ufffd\004" +
    "\ufffd\005\ufffd\012\ufffd\020\ufffd\021\ufffd\036\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\055\ufffd\063\ufffd\001\002\000" +
    "\004\063\130\001\002\000\004\040\131\001\002\000\022" +
    "\005\020\020\027\021\005\032\051\034\055\036\012\055" +
    "\023\063\031\001\002\000\006\037\133\040\057\001\002" +
    "\000\026\035\uffea\037\uffea\040\uffea\041\uffea\043\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\032\002\010\003\025\004\024\022\005\023" +
    "\003\024\021\026\012\027\023\033\013\034\016\035\014" +
    "\036\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\021\027\023\033\122\034\016\035" +
    "\014\036\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\075\023\003\026\012\030\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\065\022\005\023\003" +
    "\024\021\026\012\027\023\033\013\034\016\035\014\036" +
    "\006\001\001\000\002\001\001\000\016\024\021\027\023" +
    "\033\031\034\016\035\014\036\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\021\027\023\033\045" +
    "\034\016\035\014\036\006\001\001\000\010\024\021\034" +
    "\044\035\014\001\001\000\010\024\021\034\035\035\014" +
    "\001\001\000\002\001\001\000\006\024\021\035\043\001" +
    "\001\000\006\024\021\035\042\001\001\000\006\024\021" +
    "\035\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\024\021\025\053\027\023\033\051\034" +
    "\016\035\014\036\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\024" +
    "\021\025\055\027\023\033\051\034\016\035\014\036\006" +
    "\001\001\000\002\001\001\000\016\024\021\027\023\033" +
    "\060\034\016\035\014\036\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\024\021\025" +
    "\063\027\023\033\051\034\016\035\014\036\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\073\004\024\022\005\023" +
    "\003\024\021\026\012\027\023\033\013\034\016\035\014" +
    "\036\006\001\001\000\026\004\065\022\005\023\003\024" +
    "\021\026\012\027\023\033\013\034\016\035\014\036\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\021\027\023\033\101" +
    "\034\016\035\014\036\006\001\001\000\002\001\001\000" +
    "\030\003\103\004\024\022\005\023\003\024\021\026\012" +
    "\027\023\033\013\034\016\035\014\036\006\001\001\000" +
    "\026\004\065\022\005\023\003\024\021\026\012\027\023" +
    "\033\013\034\016\035\014\036\006\001\001\000\002\001" +
    "\001\000\012\022\075\023\003\026\012\030\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\112\032\114\041\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\117\004\024\022\005\023\003\024\021\026\012" +
    "\027\023\033\013\034\016\035\014\036\006\001\001\000" +
    "\026\004\065\022\005\023\003\024\021\026\012\027\023" +
    "\033\013\034\016\035\014\036\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\024\021\025\131\027\023\033\051" +
    "\034\016\035\014\036\006\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= funDefn 
            {
              StmtDefinition RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtFnDefinition d = (StmtFnDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= proc 
            {
              StmtDefinition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exPair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new exPair(e1,e2);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exPair",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // car ::= CAR LPAREN exPair RPAREN 
            {
              CarStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CarStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("car",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cdr ::= CDR LPAREN exPair RPAREN 
            {
              CdrStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CdrStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdr",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // isPair ::= IFPAIR LPAREN exPair RPAREN 
            {
              IsPairStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsPairStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isPair",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vector ::= LBRACKET COLON expList COLON RBRACKET 
            {
              VectorExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new VectorExp(lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vector",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // retVec ::= vector LBRACKET INTEGER RBRACKET 
            {
              RetVctStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new retVectStmt(v,i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("retVec",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // size ::= SIZE LPAREN vector RPAREN 
            {
              SizeStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SizeStmt(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("size",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // isEqual ::= IFEQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqualStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsEqualStmt(e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqual",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // isEqv ::= IFEQUIVALENT LPAREN expression COMMA expression RPAREN 
            {
              IsEqvStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsEqvStmt(e1,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqv",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // substr ::= SUBSTRING LPAREN STRING COMMA INTEGER COMMA INTEGER RPAREN 
            {
              SubStrStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubStrStmt(s,start,end); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substr",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc ::= PROC LPAREN idList RPAREN stmtList 
            {
              ExpProcedure RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProcedure(lst,body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("proc",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funDefn ::= DEF VARIABLE PROC LPAREN idListE RPAREN LBRACE stmtList RBRACE 
            {
              StmtFnDefinition RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	    	RESULT = new StmtFnDefinition(name,body,p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDefn",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-8)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funCall ::= VARIABLE LPAREN expList RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	    	RESULT = new ExpFnCall(fn, args);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funCall ::= VARIABLE LPAREN RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
	    	RESULT = new ExpFnCall(fn, new ArrayList<Exp>());
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funCall ::= CALL LPAREN VARIABLE COMMA expList RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = new ExpFnCall(fn, args);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              LazyStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LazyStmt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazy",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // idList ::= idList COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    l.add(v);
		    RESULT = l;
       	   
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // idList ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
       	   	    ArrayList<String> lst = new ArrayList<String>();
		    lst.add(v);
		    RESULT = lst;
	   
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // idListE ::= idList 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // idListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // letExpn ::= LET defnList LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int dlstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int dlstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList<StmtDefinition> dlst = (ArrayList<StmtDefinition>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = new ExpLet(dlst, body);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letExpn",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // defnList ::= definition COMMA defnList 
            {
              ArrayList<StmtDefinition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<StmtDefinition> lst = (ArrayList<StmtDefinition>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	     	lst.add(d);
		RESULT = lst;	         
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("defnList",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // defnList ::= definition 
            {
              ArrayList<StmtDefinition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        ArrayList<StmtDefinition> lst = new ArrayList<StmtDefinition>();
		lst.add(d);
		RESULT = lst;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("defnList",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        lst.add(e);
	    	RESULT = lst;
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        ArrayList<Exp> lst = new ArrayList<Exp>();
		lst.add(e);
	    	RESULT = lst;
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expList ::= LIST LPAREN expList RPAREN 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = lst;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expList ::= LBRACKET expList RBRACKET 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= letExpn 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= exPair 
            {
              Exp RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp ep = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ep; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= funCall 
            {
              Exp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpFnCall call = (ExpFnCall)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
