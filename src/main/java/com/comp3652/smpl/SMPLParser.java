
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.comp3652.smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\034\010\000\002\005\006\000\002\006\006\000\002" +
    "\007\006\000\002\035\007\000\002\011\006\000\002\012" +
    "\006\000\002\013\010\000\002\014\010\000\002\015\012" +
    "\000\002\024\007\000\002\010\006\000\002\010\006\000" +
    "\002\017\005\000\002\017\005\000\002\021\013\000\002" +
    "\022\006\000\002\022\005\000\002\022\010\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\016\006\000\002\027\005\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\025\007\000\002\026\005" +
    "\000\002\026\003\000\002\023\005\000\002\023\003\000" +
    "\002\023\006\000\002\023\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\005\000\002" +
    "\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\052\004\053\005\045\010\015\011\022\012" +
    "\050\017\014\020\037\021\026\022\055\023\023\024\043" +
    "\025\012\027\035\030\006\031\046\033\005\034\010\036" +
    "\020\055\016\063\042\001\002\000\004\002\241\001\002" +
    "\000\004\036\232\001\002\000\004\036\225\001\002\000" +
    "\024\034\075\035\uffca\037\uffca\040\uffca\041\uffca\043\uffca" +
    "\044\uffca\047\uffca\050\uffca\001\002\000\004\044\115\001" +
    "\002\000\054\002\000\004\053\005\045\010\015\011\022" +
    "\012\050\017\014\020\037\021\026\022\055\023\023\024" +
    "\043\025\012\027\035\030\006\031\046\033\005\034\010" +
    "\036\020\055\016\063\042\001\002\000\004\036\223\001" +
    "\002\000\004\043\222\001\002\000\004\036\217\001\002" +
    "\000\004\036\214\001\002\000\030\035\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\030\035\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\043\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\001\002\000\046\005\045\010\015\011" +
    "\022\017\014\020\037\021\026\022\055\023\023\024\043" +
    "\025\012\027\035\030\006\031\046\033\005\034\010\036" +
    "\020\055\016\063\060\001\002\000\030\035\uffde\037\uffde" +
    "\040\uffde\041\uffde\043\uffde\044\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\001\002\000\004\036\207\001\002" +
    "\000\004\036\204\001\002\000\010\040\ufffa\041\ufffa\043" +
    "\ufffa\001\002\000\030\035\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\004\036\177\001\002\000\022\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\047\uffcd\050" +
    "\uffcd\001\002\000\030\035\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\043\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\001\002\000\030\035\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\001\002\000\022\035\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\043\uffcb\044\uffcb\047\uffcb\050\uffcb\001\002\000\010\043" +
    "\176\047\063\050\064\001\002\000\010\040\ufff9\041\ufff9" +
    "\043\ufff9\001\002\000\004\036\173\001\002\000\030\035" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\047\uffcc" +
    "\050\uffcc\051\070\052\071\053\067\001\002\000\004\036" +
    "\166\001\002\000\030\035\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\043\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\001\002\000\030\035\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\043\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\022\036\101\043\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\155\001\002\000\004\036" +
    "\164\001\002\000\030\035\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\043\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\001\002\000\010\004\053\012\050\063\154\001\002" +
    "\000\004\036\145\001\002\000\030\035\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\043\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\001\002\000\004\036\141\001\002\000" +
    "\030\035\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000" +
    "\030\035\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000" +
    "\004\063\123\001\002\000\030\035\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\043\uffc6\044\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\001\002\000\004\036\057\001\002\000\064" +
    "\002\ufffe\004\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\036\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\055\ufffe\063\ufffe\001\002" +
    "\000\046\005\045\010\015\011\022\017\014\020\037\021" +
    "\026\022\055\023\023\024\043\025\012\027\035\030\006" +
    "\031\046\033\005\034\010\036\020\055\016\063\060\001" +
    "\002\000\032\035\uffc4\036\101\037\uffc4\040\uffc4\041\uffc4" +
    "\043\uffc4\044\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\001\002\000\010\037\062\047\063\050\064\001\002" +
    "\000\030\035\uffed\037\uffed\040\uffed\041\uffed\043\uffed\044" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001\002" +
    "\000\042\010\015\011\022\017\014\021\026\022\055\023" +
    "\023\024\043\025\012\027\035\030\006\031\046\033\005" +
    "\034\010\036\020\055\016\063\060\001\002\000\042\010" +
    "\015\011\022\017\014\021\026\022\055\023\023\024\043" +
    "\025\012\027\035\030\006\031\046\033\005\034\010\036" +
    "\020\055\016\063\060\001\002\000\004\034\075\001\002" +
    "\000\030\035\uffce\037\uffce\040\uffce\041\uffce\043\uffce\044" +
    "\uffce\047\uffce\050\uffce\051\070\052\071\053\067\001\002" +
    "\000\042\010\015\011\022\017\014\021\026\022\055\023" +
    "\023\024\043\025\012\027\035\030\006\031\046\033\005" +
    "\034\010\036\020\055\016\063\060\001\002\000\042\010" +
    "\015\011\022\017\014\021\026\022\055\023\023\024\043" +
    "\025\012\027\035\030\006\031\046\033\005\034\010\036" +
    "\020\055\016\063\060\001\002\000\042\010\015\011\022" +
    "\017\014\021\026\022\055\023\023\024\043\025\012\027" +
    "\035\030\006\031\046\033\005\034\010\036\020\055\016" +
    "\063\060\001\002\000\030\035\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\043\uffc8\044\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\030\035\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\043\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\001\002\000\030\035\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\043\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\001\002\000\004\055\076\001\002\000\004\035" +
    "\077\001\002\000\030\035\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\043\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\001\002\000\030\035\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\043\uffcf\044\uffcf\047\uffcf\050\uffcf\051\070\052\071\053" +
    "\067\001\002\000\052\005\045\010\015\011\022\017\014" +
    "\020\037\021\026\022\055\023\023\024\043\025\012\027" +
    "\035\030\006\031\046\032\105\033\005\034\102\036\020" +
    "\037\103\055\016\063\060\001\002\000\052\005\045\010" +
    "\015\011\022\017\014\020\037\021\026\022\055\023\023" +
    "\024\043\025\012\027\035\030\006\031\046\032\105\033" +
    "\005\034\102\036\020\044\115\055\016\063\060\001\002" +
    "\000\030\035\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002" +
    "\000\016\035\uffd2\037\uffd2\040\uffd2\044\uffd2\047\063\050" +
    "\064\001\002\000\004\036\112\001\002\000\006\037\110" +
    "\040\107\001\002\000\046\005\045\010\015\011\022\017" +
    "\014\020\037\021\026\022\055\023\023\024\043\025\012" +
    "\027\035\030\006\031\046\033\005\034\010\036\020\055" +
    "\016\063\060\001\002\000\030\035\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\001\002\000\016\035\uffd3\037\uffd3\040\uffd3" +
    "\044\uffd3\047\063\050\064\001\002\000\050\005\045\010" +
    "\015\011\022\017\014\020\037\021\026\022\055\023\023" +
    "\024\043\025\012\027\035\030\006\031\046\032\105\033" +
    "\005\034\102\036\020\055\016\063\060\001\002\000\006" +
    "\037\114\040\107\001\002\000\012\035\uffd1\037\uffd1\040" +
    "\uffd1\044\uffd1\001\002\000\050\005\045\010\015\011\022" +
    "\017\014\020\037\021\026\022\055\023\023\024\043\025" +
    "\012\027\035\030\006\031\046\032\105\033\005\034\102" +
    "\036\020\055\016\063\060\001\002\000\006\035\117\040" +
    "\107\001\002\000\012\035\uffd0\037\uffd0\040\uffd0\044\uffd0" +
    "\001\002\000\006\040\107\044\121\001\002\000\004\035" +
    "\122\001\002\000\024\034\ufff4\035\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\044\ufff4\047\ufff4\050\ufff4\001\002\000" +
    "\004\012\124\001\002\000\004\036\125\001\002\000\006" +
    "\037\uffc1\063\131\001\002\000\006\037\uffd8\040\137\001" +
    "\002\000\004\037\uffd7\001\002\000\004\037\132\001\002" +
    "\000\006\037\uffd9\040\uffd9\001\002\000\004\041\133\001" +
    "\002\000\052\004\053\005\045\010\015\011\022\012\050" +
    "\017\014\020\037\021\026\022\055\023\023\024\043\025" +
    "\012\027\035\030\006\031\046\033\005\034\010\036\020" +
    "\055\016\063\042\001\002\000\054\004\053\005\045\010" +
    "\015\011\022\012\050\017\014\020\037\021\026\022\055" +
    "\023\023\024\043\025\012\027\035\030\006\031\046\033" +
    "\005\034\010\036\020\042\135\055\016\063\042\001\002" +
    "\000\010\040\uffe9\041\uffe9\043\uffe9\001\002\000\064\002" +
    "\uffff\004\uffff\005\uffff\010\uffff\011\uffff\012\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\027" +
    "\uffff\030\uffff\031\uffff\033\uffff\034\uffff\036\uffff\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\055\uffff\063\uffff\001\002\000" +
    "\004\063\140\001\002\000\006\037\uffda\040\uffda\001\002" +
    "\000\004\063\131\001\002\000\006\037\143\040\137\001" +
    "\002\000\052\004\053\005\045\010\015\011\022\012\050" +
    "\017\014\020\037\021\026\022\055\023\023\024\043\025" +
    "\012\027\035\030\006\031\046\033\005\034\010\036\020" +
    "\055\016\063\042\001\002\000\060\004\053\005\045\010" +
    "\015\011\022\012\050\017\014\020\037\021\026\022\055" +
    "\023\023\024\043\025\012\027\035\030\006\031\046\033" +
    "\005\034\010\036\020\040\uffee\041\uffee\043\uffee\055\016" +
    "\063\042\001\002\000\046\005\045\010\015\011\022\017" +
    "\014\020\037\021\026\022\055\023\023\024\043\025\012" +
    "\027\035\030\006\031\046\033\005\034\010\036\020\055" +
    "\016\063\060\001\002\000\010\040\147\047\063\050\064" +
    "\001\002\000\046\005\045\010\015\011\022\017\014\020" +
    "\037\021\026\022\055\023\023\024\043\025\012\027\035" +
    "\030\006\031\046\033\005\034\010\036\020\055\016\063" +
    "\060\001\002\000\010\037\151\047\063\050\064\001\002" +
    "\000\030\035\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002" +
    "\000\006\040\162\041\uffd4\001\002\000\004\041\157\001" +
    "\002\000\004\054\155\001\002\000\046\005\045\010\015" +
    "\011\022\017\014\020\037\021\026\022\055\023\023\024" +
    "\043\025\012\027\035\030\006\031\046\033\005\034\010" +
    "\036\020\055\016\063\060\001\002\000\014\040\ufffb\041" +
    "\ufffb\043\ufffb\047\063\050\064\001\002\000\052\004\053" +
    "\005\045\010\015\011\022\012\050\017\014\020\037\021" +
    "\026\022\055\023\023\024\043\025\012\027\035\030\006" +
    "\031\046\033\005\034\010\036\020\055\016\063\042\001" +
    "\002\000\054\004\053\005\045\010\015\011\022\012\050" +
    "\017\014\020\037\021\026\022\055\023\023\024\043\025" +
    "\012\027\035\030\006\031\046\033\005\034\010\036\020" +
    "\042\161\055\016\063\042\001\002\000\022\035\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\047\uffd6\050\uffd6" +
    "\001\002\000\010\004\053\012\050\063\154\001\002\000" +
    "\004\041\uffd5\001\002\000\004\037\165\001\002\000\030" +
    "\035\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\046" +
    "\005\045\010\015\011\022\017\014\020\037\021\026\022" +
    "\055\023\023\024\043\025\012\027\035\030\006\031\046" +
    "\033\005\034\010\036\020\055\016\063\060\001\002\000" +
    "\010\040\170\047\063\050\064\001\002\000\046\005\045" +
    "\010\015\011\022\017\014\020\037\021\026\022\055\023" +
    "\023\024\043\025\012\027\035\030\006\031\046\033\005" +
    "\034\010\036\020\055\016\063\060\001\002\000\010\037" +
    "\172\047\063\050\064\001\002\000\022\035\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\043\ufff8\044\ufff8\047\ufff8\050\ufff8\001" +
    "\002\000\004\034\010\001\002\000\004\037\175\001\002" +
    "\000\030\035\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002" +
    "\000\064\002\ufffc\004\ufffc\005\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc\036" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\055\ufffc\063\ufffc" +
    "\001\002\000\004\063\200\001\002\000\004\040\201\001" +
    "\002\000\050\005\045\010\015\011\022\017\014\020\037" +
    "\021\026\022\055\023\023\024\043\025\012\027\035\030" +
    "\006\031\046\032\105\033\005\034\102\036\020\055\016" +
    "\063\060\001\002\000\006\037\203\040\107\001\002\000" +
    "\030\035\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000" +
    "\046\005\045\010\015\011\022\017\014\020\037\021\026" +
    "\022\055\023\023\024\043\025\012\027\035\030\006\031" +
    "\046\033\005\034\010\036\020\055\016\063\060\001\002" +
    "\000\010\037\206\047\063\050\064\001\002\000\030\035" +
    "\uffec\037\uffec\040\uffec\041\uffec\043\uffec\044\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\001\002\000\004\020" +
    "\037\001\002\000\004\037\211\001\002\000\030\035\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000\010\037\213" +
    "\047\063\050\064\001\002\000\030\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\001\002\000\004\020\037\001\002\000" +
    "\004\037\216\001\002\000\030\035\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\001\002\000\004\020\037\001\002\000\004" +
    "\037\221\001\002\000\030\035\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\001\002\000\064\002\ufffd\004\ufffd\005\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\027\ufffd\030\ufffd\031\ufffd\033" +
    "\ufffd\034\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\055\ufffd\063\ufffd\001\002\000\004\037\224\001\002\000" +
    "\030\035\uffea\037\uffea\040\uffea\041\uffea\043\uffea\044\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002\000" +
    "\046\005\045\010\015\011\022\017\014\020\037\021\026" +
    "\022\055\023\023\024\043\025\012\027\035\030\006\031" +
    "\046\033\005\034\010\036\020\055\016\063\060\001\002" +
    "\000\010\040\227\047\063\050\064\001\002\000\046\005" +
    "\045\010\015\011\022\017\014\020\037\021\026\022\055" +
    "\023\023\024\043\025\012\027\035\030\006\031\046\033" +
    "\005\034\010\036\020\055\016\063\060\001\002\000\010" +
    "\037\231\047\063\050\064\001\002\000\030\035\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\001\002\000\004\064\233\001" +
    "\002\000\004\040\234\001\002\000\004\055\235\001\002" +
    "\000\004\040\236\001\002\000\004\055\237\001\002\000" +
    "\004\037\240\001\002\000\030\035\uffef\037\uffef\040\uffef" +
    "\041\uffef\043\uffef\044\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\060\002\003\003\010\004\055\005\037\006" +
    "\040\007\050\010\051\011\046\012\016\013\043\014\024" +
    "\015\020\017\027\020\012\021\023\022\030\024\033\025" +
    "\026\031\032\032\035\033\053\034\031\035\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\135\005\037" +
    "\006\040\007\050\010\051\011\046\012\016\013\043\014" +
    "\024\015\020\017\027\020\012\021\023\022\030\024\033" +
    "\025\026\031\032\032\035\033\053\034\031\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\037\006\040\007\050\010\051\011\046\012\016" +
    "\013\043\014\024\015\020\017\027\022\030\025\026\031" +
    "\211\032\035\033\053\034\031\035\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\151\021\023\024\033\026\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\037" +
    "\006\040\007\050\010\051\011\046\012\016\013\043\014" +
    "\024\015\020\017\027\022\030\025\026\031\060\032\035" +
    "\033\053\034\031\035\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\037\006\040" +
    "\007\050\010\051\011\046\012\016\013\043\014\024\015" +
    "\020\017\027\022\030\032\077\033\053\035\064\001\001" +
    "\000\036\005\037\006\040\007\050\010\051\011\046\012" +
    "\016\013\043\014\024\015\020\017\027\022\030\032\065" +
    "\033\053\035\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\037\006\040\007\050\010\051\011\046" +
    "\012\016\013\043\014\024\015\020\017\027\022\030\033" +
    "\073\035\064\001\001\000\034\005\037\006\040\007\050" +
    "\010\051\011\046\012\016\013\043\014\024\015\020\017" +
    "\027\022\030\033\072\035\064\001\001\000\034\005\037" +
    "\006\040\007\050\010\051\011\046\012\016\013\043\014" +
    "\024\015\020\017\027\022\030\033\071\035\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\005\037\006\040\007\050\010\051\011" +
    "\046\012\016\013\043\014\024\015\020\017\027\022\030" +
    "\023\105\025\026\031\103\032\035\033\053\034\031\035" +
    "\006\001\001\000\046\005\037\006\040\007\050\010\051" +
    "\011\046\012\016\013\043\014\024\015\020\017\027\022" +
    "\030\023\115\025\026\031\103\032\035\033\053\034\031" +
    "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\005\037\006\040" +
    "\007\050\010\051\011\046\012\016\013\043\014\024\015" +
    "\020\017\027\022\030\025\026\031\110\032\035\033\053" +
    "\034\031\035\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\005\037\006\040\007\050\010\051\011\046" +
    "\012\016\013\043\014\024\015\020\017\027\022\030\023" +
    "\112\025\026\031\103\032\035\033\053\034\031\035\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\005" +
    "\037\006\040\007\050\010\051\011\046\012\016\013\043" +
    "\014\024\015\020\017\027\022\030\023\117\025\026\031" +
    "\103\032\035\033\053\034\031\035\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\125\030\127\037\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\133\004\055\005\037\006" +
    "\040\007\050\010\051\011\046\012\016\013\043\014\024" +
    "\015\020\017\027\020\012\021\023\022\030\024\033\025" +
    "\026\031\032\032\035\033\053\034\031\035\006\001\001" +
    "\000\054\004\135\005\037\006\040\007\050\010\051\011" +
    "\046\012\016\013\043\014\024\015\020\017\027\020\012" +
    "\021\023\022\030\024\033\025\026\031\032\032\035\033" +
    "\053\034\031\035\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\141\001\001\000\002\001\001\000\056\003\143\004\055" +
    "\005\037\006\040\007\050\010\051\011\046\012\016\013" +
    "\043\014\024\015\020\017\027\020\012\021\023\022\030" +
    "\024\033\025\026\031\032\032\035\033\053\034\031\035" +
    "\006\001\001\000\054\004\135\005\037\006\040\007\050" +
    "\010\051\011\046\012\016\013\043\014\024\015\020\017" +
    "\027\020\012\021\023\022\030\024\033\025\026\031\032" +
    "\032\035\033\053\034\031\035\006\001\001\000\044\005" +
    "\037\006\040\007\050\010\051\011\046\012\016\013\043" +
    "\014\024\015\020\017\027\022\030\025\026\031\145\032" +
    "\035\033\053\034\031\035\006\001\001\000\002\001\001" +
    "\000\044\005\037\006\040\007\050\010\051\011\046\012" +
    "\016\013\043\014\024\015\020\017\027\022\030\025\026" +
    "\031\147\032\035\033\053\034\031\035\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\037\006\040\007" +
    "\050\010\051\011\046\012\016\013\043\014\024\015\020" +
    "\017\027\022\030\025\026\031\155\032\035\033\053\034" +
    "\031\035\006\001\001\000\002\001\001\000\056\003\157" +
    "\004\055\005\037\006\040\007\050\010\051\011\046\012" +
    "\016\013\043\014\024\015\020\017\027\020\012\021\023" +
    "\022\030\024\033\025\026\031\032\032\035\033\053\034" +
    "\031\035\006\001\001\000\054\004\135\005\037\006\040" +
    "\007\050\010\051\011\046\012\016\013\043\014\024\015" +
    "\020\017\027\020\012\021\023\022\030\024\033\025\026" +
    "\031\032\032\035\033\053\034\031\035\006\001\001\000" +
    "\002\001\001\000\012\020\151\021\023\024\033\026\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\005\037\006\040\007\050\010\051\011\046" +
    "\012\016\013\043\014\024\015\020\017\027\022\030\025" +
    "\026\031\166\032\035\033\053\034\031\035\006\001\001" +
    "\000\002\001\001\000\044\005\037\006\040\007\050\010" +
    "\051\011\046\012\016\013\043\014\024\015\020\017\027" +
    "\022\030\025\026\031\170\032\035\033\053\034\031\035" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\005\037\006\040\007\050\010\051\011\046\012\016\013" +
    "\043\014\024\015\020\017\027\022\030\023\201\025\026" +
    "\031\103\032\035\033\053\034\031\035\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\005\037\006\040" +
    "\007\050\010\051\011\046\012\016\013\043\014\024\015" +
    "\020\017\027\022\030\025\026\031\204\032\035\033\053" +
    "\034\031\035\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\037\006\040\007\050\010\051\011\046\012\016\013" +
    "\043\014\024\015\020\017\027\022\030\025\026\031\225" +
    "\032\035\033\053\034\031\035\006\001\001\000\002\001" +
    "\001\000\044\005\037\006\040\007\050\010\051\011\046" +
    "\012\016\013\043\014\024\015\020\017\027\022\030\025" +
    "\026\031\227\032\035\033\053\034\031\035\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= funDefn 
            {
              StmtDefinition RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtFnDefinition d = (StmtFnDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= proc 
            {
              StmtDefinition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exPair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new exPair(e1,e2);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exPair",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // car ::= CAR LPAREN exPair RPAREN 
            {
              CarStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CarStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("car",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cdr ::= CDR LPAREN exPair RPAREN 
            {
              CdrStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CdrStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdr",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // isPair ::= IFPAIR LPAREN exPair RPAREN 
            {
              IsPairStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp p = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsPairStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isPair",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vector ::= LBRACKET COLON expList COLON RBRACKET 
            {
              VectorExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new VectorExp(lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vector",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // retVec ::= vector LBRACKET INTEGER RBRACKET 
            {
              RetVctStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new retVectStmt(v,i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("retVec",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // size ::= SIZE LPAREN vector RPAREN 
            {
              SizeStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SizeStmt(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("size",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // isEqual ::= IFEQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqualStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsEqualStmt(e,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqual",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // isEqv ::= IFEQUIVALENT LPAREN expression COMMA expression RPAREN 
            {
              IsEqvStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IsEqvStmt(e1,e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("isEqv",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // substr ::= SUBSTRING LPAREN STRING COMMA INTEGER COMMA INTEGER RPAREN 
            {
              SubStrStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubStrStmt(s,start,end); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substr",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc ::= PROC LPAREN idList RPAREN stmtList 
            {
              ExpProcedure RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProcedure(lst,body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("proc",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print ::= PRINT LPAREN expression RPAREN 
            {
              PrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
            RESULT = new PrintStmt(e);
          
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              PrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintStmt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read ::= READ LPAREN RPAREN 
            {
              ReadStmt RESULT =null;
		
                RESULT = new ReadStmt();
         
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // read ::= READINT LPAREN RPAREN 
            {
              ReadStmt RESULT =null;
		
                RESULT = new ReadStmt();
         
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funDefn ::= DEF VARIABLE PROC LPAREN idListE RPAREN LBRACE stmtList RBRACE 
            {
              StmtFnDefinition RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	    	RESULT = new StmtFnDefinition(name,body,p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDefn",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-8)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funCall ::= VARIABLE LPAREN expList RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	    	RESULT = new ExpFnCall(fn, args);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funCall ::= VARIABLE LPAREN RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
	    	RESULT = new ExpFnCall(fn, new ArrayList<Exp>());
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funCall ::= CALL LPAREN VARIABLE COMMA expList RPAREN 
            {
              ExpFnCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = new ExpFnCall(fn, args);
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funCall ::= car 
            {
              ExpFnCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CarStmt c = (CarStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funCall ::= cdr 
            {
              ExpFnCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CdrStmt c = (CdrStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funCall ::= isPair 
            {
              ExpFnCall RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IsPairStmt p = (IsPairStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = p;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funCall ::= retVec 
            {
              ExpFnCall RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		RetVctStmt r = (RetVctStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = r;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funCall ::= size 
            {
              ExpFnCall RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SizeStmt s = (SizeStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funCall ::= isEqual 
            {
              ExpFnCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IsEqualStmt e = (IsEqualStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funCall ::= isEqv 
            {
              ExpFnCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IsEqvStmt e = (IsEqvStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funCall ::= substr 
            {
              ExpFnCall RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SubStrStmt s = (SubStrStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funCall ::= print 
            {
              ExpFnCall RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PrintStmt p = (PrintStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = p;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funCall ::= read 
            {
              ExpFnCall RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ReadStmt r = (ReadStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = r;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              LazyStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LazyStmt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazy",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // idList ::= idList COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    l.add(v);
		    RESULT = l;
       	   
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // idList ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
       	   	    ArrayList<String> lst = new ArrayList<String>();
		    lst.add(v);
		    RESULT = lst;
	   
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // idListE ::= idList 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // idListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // letExpn ::= LET defnList LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int dlstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int dlstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList<StmtDefinition> dlst = (ArrayList<StmtDefinition>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = new ExpLet(dlst, body);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letExpn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // defnList ::= definition COMMA defnList 
            {
              ArrayList<StmtDefinition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<StmtDefinition> lst = (ArrayList<StmtDefinition>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	     	lst.add(d);
		RESULT = lst;	         
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("defnList",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // defnList ::= definition 
            {
              ArrayList<StmtDefinition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        ArrayList<StmtDefinition> lst = new ArrayList<StmtDefinition>();
		lst.add(d);
		RESULT = lst;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("defnList",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        lst.add(e);
	    	RESULT = lst;
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	        ArrayList<Exp> lst = new ArrayList<Exp>();
		lst.add(e);
	    	RESULT = lst;
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expList ::= LIST LPAREN expList RPAREN 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	        RESULT = lst;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expList ::= LBRACKET expList RBRACKET 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= letExpn 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= exPair 
            {
              Exp RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp ep = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ep; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		VectorExp v = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= funCall 
            {
              Exp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpFnCall call = (ExpFnCall)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
