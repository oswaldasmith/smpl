package com.comp3652.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {: 
	SMPLLexer lexer;

	public SMPLParser(SMPLLexer l) {
	    // As of CUP v0.11, need to pass Lexer to superclass
	    super(l);
	    lexer = l;
	}

	public SMPLParser(String file) throws FileNotFoundException {
        this(new SMPLLexer(new FileReader(file)));
    }

    public SMPLParser(InputStream is) {
        this(new SMPLLexer(is));
    }

	public void report_error(String message, Object info) {
	    System.err.println(message);
	}

	public void syntax_error(Symbol cur_token) {
	    System.err.print("Line " + lexer.getLine() +
			     " near char " + lexer.getChar() + ": ");
	    report_error("Syntax error", cur_token);
	    System.err.println ("Last token read is " +
				 lexer.getText());
	}
:};

init with {: :};

scan with {:
	try {
		return lexer.next_token();
	} catch (java.io.IOException ioe) {
		System.out.println ("Unrecognised token");
		System.out.println(ioe.getMessage());
		throw ioe;
	}
:};

/* Terminals */

// special symbols
terminal LBRACKET,RBRACKET,LPAREN, RPAREN,COMMA, LBRACE, RBRACE, SEMI, COLON;

// functions
terminal DEF, PROC, LAZY;

// aithmetic
terminal PLUS, MINUS, DIV, MOD, TIMES;

//Builtin Statements
terminal PRINT, PRINTLN, READ, READINT, CASE;

//bitwise
terminal BITAND, BITOR, BITNOT;

//unary operators and Logic Extensions
terminal AND, OR, NOT;
terminal CMP, IF, THEN, ELSE, LET;

terminal HEX, BIN;

// terminals with values
terminal Integer INTEGER;
terminal Double FLOAT;
terminal Double FRACTION;
terminal Char CHAR;
terminal Boolean TRUE;
terminal Boolean FALSE;
terminal String VAR;
terminal String STRING;

/* Non terminals */

// basic expressions
non terminal ASTExp<SMPLExp> expression;

non terminal SMPLProgram program;
non terminal SMPLSequence stmtList;
non terminal SMPLStatement stmt;

// assignment
non terminal SMPLAssignment assign;
non terminal SMPLMultipleAssignment multipleAssign;

// function
non terminal SMPLFuncDef funDef;
non terminal SMPLFuncCall funCall;

non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;

// conditional
non terminal SMPLStatement condStmt;
non terminal SMPLStatement predExp;

// logic operators
non terminal SMPLLogicJoin conditionalAnd;
non terminal SMPLLogicNot conditionalNot;

// let
non terminal SMPLStatement let;
non terminal SMPLStatement bindList;
non terminal SMPLStatement binding;

// case
non terminal SMPLStatement case;
non terminal SMPLStatement caseStmts;
non terminal SMPLStatement caseExp;

// if
non terminal SMPLStatement condition;

non terminal ASTExp<AIRExp> arithExp;
non terminal ASTExp<AIRExp> arithTerm;
non terminal ASTExp<AIRExp> arithConstFactor;
non terminal ASTExp<AIRExp> arithFactor;

// TODO
// not used, delete
non terminal ArrayList<ASTExp<AIRExp>> aExpList;   /* non-empty arith exp list */
non terminal ArrayList<ASTExp<AIRExp>> aExpListE;  /* potentially empty arith exp list */

non terminal ArrayList<String> varList;
non terminal ArrayList<String> remainingVarList;


non terminal empty;

program ::= stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::= stmtList:seq stmt:s {:
				seq.addStatement(s);
				RESULT = seq;
			:} |
			empty {:
				RESULT = new SMPLSequence();
			:};

stmt ::= expression:e {: RESULT = e; :} |
		assign:a {: RESULT = a; :} |
		multipleAssign:m {: RESULT = m; :};

// single assign

assign ::= DEF VAR:v expression:e {: RESULT = new SMPLAssign(v, e); } |
		VAR:v ASSIGN expression:e {: RESULT = new SMPLAssign(v, e); };

// multiple assign

multipleAssign := varList:lst ASSIGN expression:e {: RESULT = new SMPLMulAssign(lst, e); };


expression ::= expression:e OR:o conditionAnd:c {: RESULT = new SMPLLogicJoin(e, c, o); :} |
			body:b {: RESULT = b; :} |
			conditionalAnd:c {: RESULT = c; :};

// conditionals
conditionalAnd ::= conditionalAnd:ca AND:a conditionalNot:cn {:
				RESULT = new SMPLLogicJoin(ca, cn, a); 
			:} |
			conditionalNot:c {: RESULT = c; :};

conditionalNot ::= NOT:n predExp:p {: RESULT = new SMPLLogicNot(p, n) :} |
				predExp:b {: RESULT = p; :};

predExp ::= predExp:p CMP:c bitExp:e {: RESULT = new CIRExp(p, e, c); :} |
			bitExp:b {: RESULT = b; :};

bitExp ::= bitExp:b BITOR:op EXPRESSION


// not sure about this
// the body of the func can be a { stmts } or stmt
body := LBRACE stmtList:seq RBRACE {: RESULT = seq; :} |
		stmt:s {: RESULT = s; :};

varList ::= varList:lst COMMA VAR:v {: 
			lst.add(v);
			RESULT = lst;
		:} |
		VAR:v {:
			ArrayList<String> lst = new ArrayList<>();
			lst.add(v);
			RESULT = v;
		:};

// not sure about this
// need to make it generic
predExp ::= predExp:pex CMP:cmp arithExp:exp


funDef ::= DEF VAR:v PROC LPAREN expressionListE:elist RPAREN stmtList:body


funCall ::= VAR:id LPAREN paramListE RPAREN {:
				
			:};

paramListE ::= paramList:lst {: RESULT = lst :} |
			empty {: RESULT = new ArrayList<>(); :};

paramList ::= paramList:lst COMMA VAR:id {:
				lst.add(id);
				RESULT = list;
			:} |
			VAR:id {:
				RESULT = new ArrayList<>();
				RESULT.add(id);
			:};

// not sure about above

arithExp ::= arithExp:e PLUS arithTerm:t {: RESULT = new ASTBinaryExp<AIRExp>("+", e, t); :} |
	     arithExp:e MINUS arithTerm:t {: RESULT = new ASTBinaryExp<AIRExp>("-", e, t); :} |
	     arithTerm:t {: RESULT = t; :};

arithTerm ::= arithTerm:t TIMES arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("*", t, f); :}|
	      arithTerm:t DIV arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("/", t, f); :}|
	      arithTerm:t MOD arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("%", t, f); :}|
	      negationFactor:n {: RESULT = n; :};

negationFactor ::= BITNOT:b factor:f {: RESULT = new BITExp(b, f); :} |
				factor:f {: RESULT = f; :};

arithConstFactor ::= INTEGER:ilit {: RESULT = new AIRExpInt(ilit); :} |
		     FRACTION:frac {: RESULT = new AIRExpFrac(frac); :};

// changed arithFactor to be more general, everything here returns something

factor ::=  VAR:var {: RESULT = new ASTVar(var); :} |
            MINUS arithFactor:f {: RESULT = new ASTUnaryExp<AIRExp>("-", f); :} |
            arithConstFactor:cf {: RESULT = cf; :} |

            LPAREN expression:e RPAREN {: RESULT = e; :} |

            HEX:h {: RESULT = new SMPLHexExp(h); :} |
            BIN:b {: RESULT = new SMPLBinExp(b); :} |

            STRING:s {: RESULT = new SMPLStringExp(s); :} |
            CHAR:c {: RESULT = new SMPLString(c); :} |

            TRUE {: RESULT = new SMPLBooleanExp(true); :} |
            FALSE {: RESULT = new SMPLBooleanExp(false); :} |

            condition:c {: RESULT = c; :} |
            case:c {: RESULT = c; :} |
            let:l {: RESULT = l; :} |

            funDef:f {: RESULT = f; :} |
            funCall:f {: RESULT = f; :} |

            vectorExp:v {: RESULT = v; :} |
            pairExp:p {: RESULT = p; :} |
            listExp:l {: RESULT = l; :};


vectorExp ::= LBRACKET COLON expressionListE:lst COLON RBRACKET {:
				RESULT = new SMPLVectorExp(lst);
			:};



pairExp ::= PAIR LPAREN expression:leftExp COMMA expression:rightExp RPAREN {:
				RESULT = new SMPLPairExp(leftExp, rightExp);
			:};

listExp ::= LIST LPAREN LBRACE expressionList:lst RBRACE RPAREN {:
				RESULT = new SMPLListExp(lst);
			:} |
			LIST LPAREN LBRACE empty RBRACE RPAREN {:
				RESULT = new SMPLListExp();
			:};

// function call

funCall ::= CALL LPAREN expression:funExp COMMA expressionList:funParams RPAREN {:
				RESULT = new SMPLFunCall(funExp, funParams);
			:} |
			VAR:id LPAREN expressionListE:params RPAREN {:
				RESULT = new SMPLFunCall(id, params);
			:};

expressionListE ::= expressionList:lst {: RESULT = lst; :} |
				empty {: RESULT = new ArrayList<>(); :};

expressionList ::= expressionList:lst COMMA expression:e {: 
					lst.add(e);
					RESULT = lst;
				:} |
				expression:e {:
					RESULT = new ArrayList<>();
					RESULT.add(e);
				:};

// function definitions

funDef ::= PROC LPAREN paramListE:p RPARAM stmt:s {:
				RESULT = new SMPLFunDef(p, s);
			:};

paramListE ::= paramList:lst {: RESULT = lst; :} |
			   empty {: RESULT = new ArrayList<>(); :};

paramList ::= paramList:lst COMMA VAR:id {:
				lst.add(id);
				RESULT = lst;
			:} |
			VAR:id {:
				RESULT = new ArrayList<>();
				RESULT.add(id);
			:}

// let expressions

let ::= LET LPAREN bindList:lst RPAREN body:b {: 
			RESULT = new SMPLet(lst, b);
		:} |
		LET LPAREN bindList:lst RPAREN expression:e {:
			RESULT = new SMPLet(lst, e);
		:};

bindList ::= bindList:lst COMMA binding:b {: 
			lst.add(b);
			RESULT = lst;
		:} |
		binding:b {: 
			// change this
			ArrayList<SMPLExp> lst = new ArrayList<>();
			lst.add(b);
			RESULT = lst;
		:};

binding ::= VAR:v BE expression:e {: RESULT = new SMPLAssignment(v, e); :};

// case statements

case ::= CASE LBRACE caseStmts:seq RBRACE {: RESULT = new SMPLCase(seq); :};

caseStmts ::= caseStmts:seq COMMA caseExp:ce {: 
				seq.add(ce);
				RESULT = seq;
			:} |
			caseExp:ce {:
				ArrayList<SMPLExp> lst = new ArrayList<>();
				lst.add(ce);
				RESULT = lst;
			:} |
			empty {: 
				RESULT = new ArrayList<>();
			:}; 

caseExp ::= expression:exp1 COLON expression:exp2 {: RESULT = new SMPLCaseExp(exp1, exp2); :} |
		ELSE COLON expression:e {: RESULT = new SMPLCaseExp(e); :};


condition ::= IF expression:exp THEN stmtList:cons {:
				RESULT = new SMPLCondition(exp, cons);
			:} |
			IF expression:exp THEN stmtList:cons ELSE stmtList:alt {:
				RESULT = new SMPLCondition(exp, cons, alt);
			:};

empty ::= ;