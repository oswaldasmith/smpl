package com.comp3652.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};
scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal DEF,PROC,LAZY,IFPAIR,PAIR,CALL,BE,ASSIGN;
terminal LBRACKET,RBRACKET,LPAREN, RPAREN,COMMA, LBRACE, RBRACE, SEMI,COLON;

// arithmetic operators
terminal PLUS, MINUS, DIV, MOD,TIMES;

//Builtin Functions
terminal SIZE,IFEQUIVALENT,IFEQUAL,LIST,SUBSTRING,CAR,CDR;

//Builtin Statements
terminal PRINT,PRINTLN,READ,READINT,CASE;

//unary operators and Logic Extensions
terminal String CMP,IF,THEN,ELSE,LET;

// terminals with values
terminal Integer INTEGER;
terminal Double FLOAT;
terminal Double FRACTION;
terminal char CHAR;
terminal Boolean TRUE;
terminal Boolean FALSE;
terminal String VAR;
terminal String STRING;

/* Non terminals */
non terminal SMPLProgram program;
non terminal SMPLStmtSequence stmtList;
non terminal SMPLStmtDefinition binding;
non terminal ArrayList<SMPLStmtDefinition> bindList;
non terminal SMPLStatement stmt;
non terminal SMPLCarStmt car;
non terminal SMPLCdrStmt cdr;
non terminal SMPLisPairStmt isPair;
non terminal SMPLPrintStmt print;
non terminal SMPLRetVctStmt retVec;
non terminal SMPLSizeStmt size;
non terminal SMPLIsEqualStmt isEqual;
non terminal SMPLIsEqvStmt isEqv;
non terminal SMPLSubStrStmt substr;
non terminal SMPLLazyStmt lazy;
non terminal SMPLIfStmt if;
non terminal SMPLLetStmt let;
non terminal SMPLCaseStmt case;
non terminal SMPLReadStmt read;
non terminal SMPLExpFnCall funCall;

non terminal ASTExp<SMPLExp> smplExp;
non terminal ASTExp<LIRExp> predExp;
non terminal ArrayList<ASTExp<AIRExp>> arithExpList;
non terminal SMPLPairExp exPair;
non terminal SMPLVectorExp vector;
non terminal SMPLExpProcedure proc;
non terminal ArrayList<String> idList;
non terminal ArrayList<String> idListE;

/*Arithmetic Expressions */
non terminal ASTExp<AIRExp> arithExp;
non terminal ASTExp<AIRExp> arithTerm;
non terminal ASTExp<AIRExp> arithConstFactor;
non terminal ASTExp<AIRExp> arithFactor;


non terminal empty;
/* Grammar rules */

start with program;

program ::= stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::= stmtList:seq stmt:s {:
                seq.addStatement(s);
                RESULT = seq; :} |
             empty {:
              RESULT = new SMPLStmtSequence(); :};

stmt ::= binding:b SEMI{:
                RESULT = b;
            :} |
            print:p SEMI{:
                RESULT = p;
            :} |
            read:r SEMI {:
                RESULT = r;
            :} |
            funCall:f SEMI {:
                RESULT = f;
            :} |
            if:i SEMI {:
                RESULT = i;
            :} |
            let:l SEMI {:
                RESULT = l;
            :} |
            case:c SEMI {:
                RESULT = c;
            :};

binding ::= DEF VAR:v arithExp:e {:
            		   RESULT = new SMPLStmtDefinition(v, e);
            		:} |
            		DEF VAR:v smplExp:e {:
            		    RESULT = new SMPLStmtDefinition(v,e);
                    :} |
                    VAR:v BE smplExp:e  {:
                        RESULT = new SMPLStmtDefinition(v,e);
                    :} |
                    VAR:v BE arithExp:e  {:
                        RESULT = new SMPLStmtDefinition(v,e);
                    :};

bindList ::= bindList:l COMMA binding:b {:
                l.add(b);
                RESULT = l;
             :};

predExp ::= arithExp:e1 CMP arithExp:e2 {:
                RESULT = new ASTExp<LIRExp>(e1,e2);
            :} |
            smplExp:e1 CMP smplExp:e2 {:
                RESULT = new ASTExp<LIRExp>(e1,e2);
            :};

smplExp ::= exPair:p {:
                RESULT = p;
            :} |
            vector:v {:
                RESULT = v;
            :};

exPair ::= PAIR LPAREN smplExp:e1 COMMA smplExp:e2 RPAREN {:
                RESULT = new exPair(e1,e2);
            :};

car ::= CAR LPAREN exPair:p RPAREN {: RESULT = new SMPLCarStmt(p); :};

cdr ::= CDR LPAREN exPair:p RPAREN {: RESULT = new SMPLCdrStmt(p); :};

isPair ::= IFPAIR LPAREN exPair:p RPAREN {: RESULT = new SMPLisPairStmt(p); :};

vector ::= LBRACKET COLON arithExpList:l COLON RBRACKET {: RESULT = new SMPLVectorExp(l); :};

retVec ::= vector:v LBRACKET INTEGER:i RBRACKET {: RESULT = new retVectStmt(v,i); :};

size ::= SIZE LPAREN vector:v RPAREN {: RESULT = new SMPLSizeStmt(v); :};

isEqual ::= IFEQUAL LPAREN smplExp:e COMMA smplExp:e2 RPAREN {: RESULT = new SMPLIsEqualStmt(e,e2); :};

isEqv ::= IFEQUIVALENT LPAREN smplExp:e COMMA smplExp:e2 RPAREN {: RESULT = new SMPLIsEqvStmt(e,e2); :};

substr ::= SUBSTRING LPAREN STRING:s COMMA INTEGER:start COMMA INTEGER:end RPAREN {: RESULT = new SMPLSubStrStmt(s,start,end); :};

proc ::= PROC LPAREN idListE:lst RPAREN LBRACE stmtList:body RBRACE {: RESULT = new SMPLExpProcedure(lst,body); :};

print ::= PRINT LPAREN arithExp:e RPAREN {:
            RESULT = new SMPLPrintStmt(e);
          :} |
          PRINTLN LPAREN arithExp:e RPAREN {: RESULT = new SMPLPrintStmt(e); :};

read ::= READ LPAREN RPAREN {:
                RESULT = new SMPLReadStmt();
         :} |
         READINT LPAREN RPAREN {:
                RESULT = new SMPLReadStmt();
         :};

if ::=  IF predExp:p THEN stmtList:cons {:
            RESULT = new SMPLIfStmt(p,cons);
        :} |
        IF predExp:p THEN stmtList:cons ELSE stmtList:alt {:
            RESULT = new SMPLIfStmt(p,cons,alt);
        :};

case ::= CASE LBRACE arithExpList:lst RBRACE arithExp:e1 COLON arithExp:e2 {: RESULT = new SMPLCaseStmt(lst,e1,e2); :};

let ::= LET LPAREN bindList:ids RPAREN stmtList:body {:
            RESULT = new SMPLLetStmt(ids,body);
        :} |
        LET LPAREN binding:id RPAREN stmtList:body {:
            RESULT = new SMPLLetStmt(ids,body);
        :};


funCall ::= VAR:fn LPAREN arithExpList:args RPAREN {:
	    	RESULT = new SMPLExpFnCall(fn, args);
	    :} |
	    VAR:fn LPAREN RPAREN {:
	    	RESULT = new SMPLExpFnCall(fn, new ArrayList<SMPLExp>());
	    :} |
	    CALL LPAREN VAR:fn  COMMA arithExpList:args RPAREN {:
	        RESULT = new SMPLExpFnCall(fn, args);
        :} |
        car:c {:
            RESULT = c;
        :} |
        cdr:c {:
            RESULT = c;
        :} |
        isPair:p {:
            RESULT = p;
        :} |
        retVec:r {:
            RESULT = r;
        :} |
        size:s {:
            RESULT = s;
        :} |
        isEqual:e {:
            RESULT = e;
        :} |
        isEqv:e {:
            RESULT = e;
        :} |
        substr:s {:
            RESULT = s;
        :} |
        proc:p {:
            RESULT = p;
        :} |
        lazy:l {:
            RESULT = l;
        :};


lazy ::= LAZY LPAREN arithExp:e RPAREN {: RESULT = new SMPLLazyStmt(e); :};

idList ::= idList:lst COMMA VAR:id {:
		lst.add(id);
		RESULT = lst; :} |
	      VAR:id {:
				RESULT = new ArrayList<>();
				RESULT.add(id);
			:};

idListE ::= idList:lst {: RESULT = lst; :} |
            empty {: RESULT = new ArrayList<>();:};

arithExpList ::= arithExpList:lst COMMA arithExp:e {:
	        lst.add(e);
	    	RESULT = lst;
	    :}|
	    arithExp:e {:
	        ArrayList<ASTExp<AIRExp>> lst = new ArrayList<ASTExp<AIRExp>>();
		lst.add(e);
	    	RESULT = lst;
	    :} |
	    LIST LPAREN arithExpList:lst RPAREN {:
	        RESULT = lst;
        :} |
        LBRACKET arithExpList:lst RBRACKET {:
            RESULT = lst;
            :};

arithExp ::= arithExp:e PLUS arithTerm:t {: RESULT = new ASTBinaryExp<AIRExp>("+", e, t); :} |
	     arithExp:e MINUS arithTerm:t {: RESULT = new ASTBinaryExp<AIRExp>("-", e, t); :} |
	     arithTerm:t {: RESULT = t; :};

arithTerm ::= arithTerm:t TIMES arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("*", t, f); :}|
	      arithTerm:t DIV arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("/", t, f); :}|
	      arithTerm:t MOD arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("%", t, f); :}|
	      arithFactor:f {: RESULT = f; :};

arithConstFactor ::= INTEGER:ilit {: RESULT = new AIRExpInt(ilit); :} |
		     FRACTION:frac {: RESULT = new AIRExpFrac(frac); :} |
		     LPAREN arithExp:e RPAREN {: RESULT = e; :};

arithFactor ::= arithConstFactor:cf {: RESULT = cf; :} |
		VAR:var {: RESULT = new ASTVar(var); :} |
                MINUS arithFactor:f {:
		      RESULT = new ASTUnaryExp<AIRExp>("-", f);
		:};

empty ::= ;