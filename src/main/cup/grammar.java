
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 29 11:48:43 EST 2015
//----------------------------------------------------

package com.comp3652.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 29 11:48:43 EST 2015
  */
public class grammar extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public grammar() {super();}

  /** Constructor which sets the default scanner. */
  public grammar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public grammar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\006\005\000\002\037\005\000\002\037\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\035\005\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\042\010\000\002" +
    "\042\010\000\002\043\007\000\002\043\007\000\002\007" +
    "\006\000\002\010\006\000\002\011\006\000\002\013\006" +
    "\000\002\014\006\000\002\015\010\000\002\016\010\000" +
    "\002\017\012\000\002\044\011\000\002\012\006\000\002" +
    "\012\006\000\002\026\005\000\002\026\005\000\002\021" +
    "\006\000\002\021\010\000\002\023\005\000\002\024\005" +
    "\000\002\025\011\000\002\022\007\000\002\022\007\000" +
    "\002\030\010\000\002\030\006\000\002\027\006\000\002" +
    "\027\010\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\020\006\000\002\045\005" +
    "\000\002\045\003\000\002\046\003\000\002\046\003\000" +
    "\002\040\005\000\002\040\003\000\002\040\006\000\002" +
    "\040\005\000\002\041\003\000\002\041\003\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\052\004\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\026\002\uffa2\004\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\052\uffa2\055\uffa2\066\uffa2\001\002" +
    "\000\004\002\335\001\002\000\034\002\ufffe\004\ufffe\022" +
    "\ufffe\023\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\052\ufffe\054\ufffe\055\ufffe\066\ufffe\001\002\000\026\002" +
    "\000\004\023\041\024\042\017\043\011\044\014\045\025" +
    "\052\021\055\026\066\020\001\002\000\004\023\334\001" +
    "\002\000\004\023\333\001\002\000\004\016\331\001\002" +
    "\000\004\023\330\001\002\000\004\023\327\001\002\000" +
    "\004\016\325\001\002\000\034\002\uffff\004\uffff\022\uffff" +
    "\023\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\052" +
    "\uffff\054\uffff\055\uffff\066\uffff\001\002\000\004\023\324" +
    "\001\002\000\004\016\321\001\002\000\006\012\313\013" +
    "\314\001\002\000\004\066\043\001\002\000\004\023\305" +
    "\001\002\000\004\066\302\001\002\000\004\016\277\001" +
    "\002\000\004\021\040\001\002\000\004\016\027\001\002" +
    "\000\006\004\023\066\020\001\002\000\006\017\035\020" +
    "\034\001\002\000\004\017\032\001\002\000\026\004\uffa2" +
    "\023\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\052" +
    "\uffa2\055\uffa2\066\uffa2\001\002\000\026\004\023\023\uffc5" +
    "\041\024\042\017\043\011\044\014\045\025\052\021\055" +
    "\026\066\020\001\002\000\006\004\023\066\020\001\002" +
    "\000\026\004\uffa2\023\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\052\uffa2\055\uffa2\066\uffa2\001\002\000\026" +
    "\004\023\023\uffc6\041\024\042\017\043\011\044\014\045" +
    "\025\052\021\055\026\066\020\001\002\000\006\017\ufff1" +
    "\020\ufff1\001\002\000\002\001\002\000\004\020\042\001" +
    "\002\000\006\054\045\066\043\001\002\000\004\051\053" +
    "\001\002\000\004\020\uffc8\001\002\000\024\004\023\041" +
    "\024\042\017\043\011\044\014\045\025\052\021\055\026" +
    "\066\020\001\002\000\004\024\047\001\002\000\024\004" +
    "\023\041\024\042\017\043\011\044\014\045\025\052\021" +
    "\055\026\066\020\001\002\000\004\020\uffc9\001\002\000" +
    "\004\022\052\001\002\000\004\023\uffc7\001\002\000\060" +
    "\005\120\006\077\007\062\010\107\011\100\014\060\016" +
    "\070\026\072\032\105\033\055\034\116\036\056\037\063" +
    "\040\067\056\064\057\114\060\071\062\073\063\061\064" +
    "\106\065\124\066\125\067\122\001\002\000\014\017\uffbd" +
    "\020\uffbd\023\uffbd\024\uffbd\053\uffbd\001\002\000\004\016" +
    "\272\001\002\000\004\016\263\001\002\000\016\014\260" +
    "\017\uffed\020\uffed\023\uffed\024\uffed\053\uffed\001\002\000" +
    "\004\024\167\001\002\000\014\017\uffec\020\uffec\023\uffec" +
    "\024\uffec\053\uffec\001\002\000\004\016\255\001\002\000" +
    "\004\016\252\001\002\000\030\015\uffaa\017\uffaa\020\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\053\uffaa\001\002\000\014\017\uffe5\020\uffe5\023\uffe5" +
    "\024\uffe5\053\uffe5\001\002\000\014\017\uffe2\020\uffe2\023" +
    "\uffe2\024\uffe2\053\uffe2\001\002\000\004\016\247\001\002" +
    "\000\020\016\070\026\072\056\064\057\114\060\071\062" +
    "\073\066\145\001\002\000\030\015\uffa8\017\uffa8\020\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\053\uffa8\001\002\000\020\016\070\026\072\056\064" +
    "\057\114\060\071\062\073\066\145\001\002\000\030\015" +
    "\uffa9\017\uffa9\020\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\053\uffa9\001\002\000\030\015" +
    "\uffaf\017\uffaf\020\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\157\030\156\031\160\053\uffaf\001\002\000\014\017" +
    "\uffe8\020\uffe8\023\uffe8\024\uffe8\053\uffe8\001\002\000\014" +
    "\017\uffe3\020\uffe3\023\uffe3\024\uffe3\053\uffe3\001\002\000" +
    "\004\016\241\001\002\000\004\016\232\001\002\000\014" +
    "\017\uffe1\020\uffe1\023\uffe1\024\uffe1\053\uffe1\001\002\000" +
    "\014\017\uffee\020\uffee\023\uffee\024\uffee\053\uffee\001\002" +
    "\000\030\015\uffab\017\uffab\020\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\053\uffab\001\002" +
    "\000\014\017\uffbe\020\uffbe\023\uffbe\024\uffbe\053\uffbe\001" +
    "\002\000\004\016\227\001\002\000\014\017\uffeb\020\uffeb" +
    "\023\uffeb\024\uffeb\053\uffeb\001\002\000\004\016\216\001" +
    "\002\000\014\017\uffc0\020\uffc0\023\uffc0\024\uffc0\053\uffc0" +
    "\001\002\000\012\024\ufff0\025\153\026\154\053\ufff0\001" +
    "\002\000\030\015\uffa5\017\uffa5\020\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\053\uffa5\001" +
    "\002\000\014\017\uffbf\020\uffbf\023\uffbf\024\uffbf\053\uffbf" +
    "\001\002\000\030\015\uffa7\017\uffa7\020\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\053\uffa7" +
    "\001\002\000\014\017\uffe4\020\uffe4\023\uffe4\024\uffe4\053" +
    "\uffe4\001\002\000\004\016\211\001\002\000\014\017\uffe6" +
    "\020\uffe6\023\uffe6\024\uffe6\053\uffe6\001\002\000\004\016" +
    "\176\001\002\000\014\017\uffe7\020\uffe7\023\uffe7\024\uffe7" +
    "\053\uffe7\001\002\000\014\017\uffea\020\uffea\023\uffea\024" +
    "\uffea\053\uffea\001\002\000\006\024\uffef\053\uffef\001\002" +
    "\000\014\017\uffe9\020\uffe9\023\uffe9\024\uffe9\053\uffe9\001" +
    "\002\000\030\016\126\017\uffa4\020\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\053\uffa4\001" +
    "\002\000\064\005\120\006\077\007\062\010\107\011\100" +
    "\014\130\016\070\017\uffa2\026\072\032\105\033\055\034" +
    "\116\035\134\036\056\037\063\040\067\056\064\057\114" +
    "\060\071\062\073\063\061\064\106\065\124\066\125\067" +
    "\122\001\002\000\004\017\uffb2\001\002\000\026\014\146" +
    "\016\070\024\167\026\072\035\134\056\064\057\114\060" +
    "\071\062\073\066\145\001\002\000\006\017\uffb3\020\150" +
    "\001\002\000\004\017\166\001\002\000\014\015\uffb6\017" +
    "\uffb6\020\uffb6\025\153\026\154\001\002\000\004\016\143" +
    "\001\002\000\006\017\140\020\137\001\002\000\006\017" +
    "\uffdf\020\uffdf\001\002\000\044\005\120\006\077\007\062" +
    "\010\107\011\100\014\060\032\105\033\055\034\116\036" +
    "\056\037\063\040\067\063\061\064\106\065\124\066\142" +
    "\067\122\001\002\000\014\017\uffc3\020\uffc3\023\uffc3\024" +
    "\uffc3\053\uffc3\001\002\000\006\017\uffe0\020\uffe0\001\002" +
    "\000\004\016\126\001\002\000\024\014\146\016\070\026" +
    "\072\035\134\056\064\057\114\060\071\062\073\066\145" +
    "\001\002\000\006\017\165\020\150\001\002\000\030\015" +
    "\uffa4\017\uffa4\020\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\053\uffa4\001\002\000\024\014" +
    "\146\016\070\026\072\035\134\056\064\057\114\060\071" +
    "\062\073\066\145\001\002\000\006\015\151\020\150\001" +
    "\002\000\020\016\070\026\072\056\064\057\114\060\071" +
    "\062\073\066\145\001\002\000\010\015\uffb4\017\uffb4\020" +
    "\uffb4\001\002\000\014\015\uffb7\017\uffb7\020\uffb7\025\153" +
    "\026\154\001\002\000\020\016\070\026\072\056\064\057" +
    "\114\060\071\062\073\066\145\001\002\000\020\016\070" +
    "\026\072\056\064\057\114\060\071\062\073\066\145\001" +
    "\002\000\030\015\uffb0\017\uffb0\020\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\157\030\156\031\160\053\uffb0\001" +
    "\002\000\020\016\070\026\072\056\064\057\114\060\071" +
    "\062\073\066\145\001\002\000\020\016\070\026\072\056" +
    "\064\057\114\060\071\062\073\066\145\001\002\000\020" +
    "\016\070\026\072\056\064\057\114\060\071\062\073\066" +
    "\145\001\002\000\030\015\uffae\017\uffae\020\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\053" +
    "\uffae\001\002\000\030\015\uffad\017\uffad\020\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\053" +
    "\uffad\001\002\000\030\015\uffac\017\uffac\020\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\053" +
    "\uffac\001\002\000\030\015\uffb1\017\uffb1\020\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\157\030\156\031\160\053" +
    "\uffb1\001\002\000\010\015\uffb5\017\uffb5\020\uffb5\001\002" +
    "\000\014\017\uffc2\020\uffc2\023\uffc2\024\uffc2\053\uffc2\001" +
    "\002\000\002\001\002\000\004\024\174\001\002\000\004" +
    "\024\172\001\002\000\004\015\173\001\002\000\016\014" +
    "\uffda\017\uffda\020\uffda\023\uffda\024\uffda\053\uffda\001\002" +
    "\000\004\015\175\001\002\000\016\014\uffd9\017\uffd9\020" +
    "\uffd9\023\uffd9\024\uffd9\053\uffd9\001\002\000\006\017\uffa2" +
    "\066\177\001\002\000\006\017\uffba\020\uffba\001\002\000" +
    "\006\017\uffb9\020\207\001\002\000\004\017\uffb8\001\002" +
    "\000\004\017\203\001\002\000\004\021\204\001\002\000" +
    "\026\004\uffa2\022\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\052\uffa2\055\uffa2\066\uffa2\001\002\000\026\004" +
    "\023\022\206\041\024\042\017\043\011\044\014\045\025" +
    "\052\021\055\026\066\020\001\002\000\014\017\uffd0\020" +
    "\uffd0\023\uffd0\024\uffd0\053\uffd0\001\002\000\004\066\210" +
    "\001\002\000\006\017\uffbb\020\uffbb\001\002\000\002\001" +
    "\002\000\004\020\213\001\002\000\002\001\002\000\004" +
    "\017\215\001\002\000\014\017\uffd3\020\uffd3\023\uffd3\024" +
    "\uffd3\053\uffd3\001\002\000\060\005\120\006\077\007\062" +
    "\010\107\011\100\014\060\016\070\026\072\032\105\033" +
    "\055\034\116\036\056\037\063\040\067\056\064\057\114" +
    "\060\071\062\073\063\061\064\106\065\124\066\125\067" +
    "\122\001\002\000\010\020\224\025\153\026\154\001\002" +
    "\000\004\020\221\001\002\000\044\005\120\006\077\007" +
    "\062\010\107\011\100\014\060\032\105\033\055\034\116" +
    "\036\056\037\063\040\067\063\061\064\106\065\124\066" +
    "\142\067\122\001\002\000\004\017\223\001\002\000\014" +
    "\017\uffdc\020\uffdc\023\uffdc\024\uffdc\053\uffdc\001\002\000" +
    "\020\016\070\026\072\056\064\057\114\060\071\062\073" +
    "\066\145\001\002\000\010\017\226\025\153\026\154\001" +
    "\002\000\014\017\uffdb\020\uffdb\023\uffdb\024\uffdb\053\uffdb" +
    "\001\002\000\004\014\060\001\002\000\004\017\231\001" +
    "\002\000\014\017\uffd4\020\uffd4\023\uffd4\024\uffd4\053\uffd4" +
    "\001\002\000\004\066\233\001\002\000\004\020\234\001" +
    "\002\000\062\005\120\006\077\007\062\010\107\011\100" +
    "\014\130\016\070\026\072\032\105\033\055\034\116\035" +
    "\134\036\056\037\063\040\067\056\064\057\114\060\071" +
    "\062\073\063\061\064\106\065\124\066\125\067\122\001" +
    "\002\000\006\017\240\020\150\001\002\000\006\017\237" +
    "\020\137\001\002\000\014\017\uffc4\020\uffc4\023\uffc4\024" +
    "\uffc4\053\uffc4\001\002\000\014\017\uffc1\020\uffc1\023\uffc1" +
    "\024\uffc1\053\uffc1\001\002\000\020\016\070\026\072\056" +
    "\064\057\114\060\071\062\073\066\145\001\002\000\010" +
    "\017\243\025\153\026\154\001\002\000\014\017\uffbc\020" +
    "\uffbc\023\uffbc\024\uffbc\053\uffbc\001\002\000\030\015\uffa3" +
    "\017\uffa3\020\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\053\uffa3\001\002\000\010\017\246" +
    "\025\153\026\154\001\002\000\030\015\uffa6\017\uffa6\020" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\053\uffa6\001\002\000\004\010\107\001\002\000" +
    "\004\017\251\001\002\000\014\017\uffd7\020\uffd7\023\uffd7" +
    "\024\uffd7\053\uffd7\001\002\000\004\010\107\001\002\000" +
    "\004\017\254\001\002\000\014\017\uffd8\020\uffd8\023\uffd8" +
    "\024\uffd8\053\uffd8\001\002\000\004\010\107\001\002\000" +
    "\004\017\257\001\002\000\014\017\uffd6\020\uffd6\023\uffd6" +
    "\024\uffd6\053\uffd6\001\002\000\004\056\261\001\002\000" +
    "\004\015\262\001\002\000\014\017\uffd5\020\uffd5\023\uffd5" +
    "\024\uffd5\053\uffd5\001\002\000\004\067\264\001\002\000" +
    "\004\020\265\001\002\000\004\056\266\001\002\000\004" +
    "\020\267\001\002\000\004\056\270\001\002\000\004\017" +
    "\271\001\002\000\014\017\uffd1\020\uffd1\023\uffd1\024\uffd1" +
    "\053\uffd1\001\002\000\002\001\002\000\004\020\274\001" +
    "\002\000\002\001\002\000\004\017\276\001\002\000\014" +
    "\017\uffd2\020\uffd2\023\uffd2\024\uffd2\053\uffd2\001\002\000" +
    "\002\001\002\000\004\017\301\001\002\000\004\023\uffcf" +
    "\001\002\000\060\005\120\006\077\007\062\010\107\011" +
    "\100\014\060\016\070\026\072\032\105\033\055\034\116" +
    "\036\056\037\063\040\067\056\064\057\114\060\071\062" +
    "\073\063\061\064\106\065\124\066\125\067\122\001\002" +
    "\000\014\017\ufff7\020\ufff7\023\ufff7\025\153\026\154\001" +
    "\002\000\010\017\ufff6\020\ufff6\023\ufff6\001\002\000\036" +
    "\002\ufffd\004\ufffd\020\ufffd\022\ufffd\023\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\052\ufffd\054\ufffd\055\ufffd" +
    "\066\ufffd\001\002\000\004\053\307\001\002\000\030\004" +
    "\uffa2\023\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\052\uffa2\054\uffa2\055\uffa2\066\uffa2\001\002\000\030\004" +
    "\023\023\uffcb\041\024\042\017\043\011\044\014\045\025" +
    "\052\021\054\311\055\026\066\020\001\002\000\026\004" +
    "\uffa2\023\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\052\uffa2\055\uffa2\066\uffa2\001\002\000\026\004\023\023" +
    "\uffca\041\024\042\017\043\011\044\014\045\025\052\021" +
    "\055\026\066\020\001\002\000\060\005\120\006\077\007" +
    "\062\010\107\011\100\014\060\016\070\026\072\032\105" +
    "\033\055\034\116\036\056\037\063\040\067\056\064\057" +
    "\114\060\071\062\073\063\061\064\106\065\124\066\125" +
    "\067\122\001\002\000\060\005\120\006\077\007\062\010" +
    "\107\011\100\014\060\016\070\026\072\032\105\033\055" +
    "\034\116\036\056\037\063\040\067\056\064\057\114\060" +
    "\071\062\073\063\061\064\106\065\124\066\125\067\122" +
    "\001\002\000\014\017\ufff2\020\ufff2\023\ufff2\025\153\026" +
    "\154\001\002\000\010\017\ufff3\020\ufff3\023\ufff3\001\002" +
    "\000\014\017\ufff4\020\ufff4\023\ufff4\025\153\026\154\001" +
    "\002\000\010\017\ufff5\020\ufff5\023\ufff5\001\002\000\002" +
    "\001\002\000\004\017\323\001\002\000\004\023\uffce\001" +
    "\002\000\036\002\ufff9\004\ufff9\020\ufff9\022\ufff9\023\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\052\ufff9\054" +
    "\ufff9\055\ufff9\066\ufff9\001\002\000\004\017\326\001\002" +
    "\000\004\023\uffcc\001\002\000\036\002\ufffb\004\ufffb\020" +
    "\ufffb\022\ufffb\023\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\052\ufffb\054\ufffb\055\ufffb\066\ufffb\001\002\000" +
    "\036\002\ufff8\004\ufff8\020\ufff8\022\ufff8\023\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\045\ufff8\052\ufff8\054\ufff8\055" +
    "\ufff8\066\ufff8\001\002\000\004\017\332\001\002\000\004" +
    "\023\uffcd\001\002\000\036\002\ufffc\004\ufffc\020\ufffc\022" +
    "\ufffc\023\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\052\ufffc\054\ufffc\055\ufffc\066\ufffc\001\002\000\036\002" +
    "\ufffa\004\ufffa\020\ufffa\022\ufffa\023\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\052\ufffa\054\ufffa\055\ufffa\066" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\010\002\003\003\005\054\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\014\005\021" +
    "\012\007\021\006\022\015\025\011\026\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\030\006\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\032\054\004\001\001\000\020" +
    "\004\014\005\021\012\007\021\006\022\015\025\011\026" +
    "\012\001\001\000\004\005\036\001\001\000\006\003\035" +
    "\054\004\001\001\000\020\004\014\005\021\012\007\021" +
    "\006\022\015\025\011\026\012\001\001\000\002\001\001" +
    "\000\004\024\040\001\001\000\002\001\001\000\006\023" +
    "\043\037\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\050\005\021\012\007\021\006\022\015\025" +
    "\011\026\012\001\001\000\002\001\001\000\020\004\047" +
    "\005\021\012\007\021\006\022\015\025\011\026\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\007\107\010\112\011\120\013\116\014\064\015" +
    "\114\016\075\017\065\020\053\027\100\030\074\032\122" +
    "\042\101\043\056\044\103\047\110\050\073\051\111\052" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\244\050\073\051\111\052\102\001\001\000\002" +
    "\001\001\000\006\051\111\052\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\007\107\010\112\011\120\013\116\014\064" +
    "\015\114\016\075\017\065\020\053\027\100\030\074\032" +
    "\135\035\134\040\130\041\131\042\101\043\056\044\103" +
    "\047\132\050\073\051\111\052\102\054\126\001\001\000" +
    "\002\001\001\000\014\040\146\047\132\050\073\051\111" +
    "\052\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\007\107\010\112\011\120\013\116\014" +
    "\064\015\114\016\075\017\065\020\053\027\100\030\074" +
    "\032\140\042\101\043\056\044\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\040\143" +
    "\047\132\050\073\051\111\052\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\040\146\047\132\050\073" +
    "\051\111\052\102\001\001\000\002\001\001\000\012\047" +
    "\151\050\073\051\111\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\163\051\111\052\102\001" +
    "\001\000\010\050\154\051\111\052\102\001\001\000\002" +
    "\001\001\000\006\051\111\052\162\001\001\000\006\051" +
    "\111\052\161\001\001\000\006\051\111\052\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\170\034\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\177\046\201\054\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\204\054" +
    "\004\001\001\000\020\004\014\005\021\012\007\021\006" +
    "\022\015\025\011\026\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\211\001\001" +
    "\000\002\001\001\000\004\033\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\007\107\010\112\011\120" +
    "\013\116\014\064\015\114\016\075\017\065\020\053\027" +
    "\100\030\074\032\217\042\101\043\056\044\103\047\216" +
    "\050\073\051\111\052\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\007\107\010\112\011\120\013\116" +
    "\014\064\015\114\016\075\017\065\020\053\027\100\030" +
    "\074\032\221\042\101\043\056\044\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\047\224\050\073\051" +
    "\111\052\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\007\107" +
    "\010\112\011\120\013\116\014\064\015\114\016\075\017" +
    "\065\020\053\027\100\030\074\032\135\035\235\040\234" +
    "\042\101\043\056\044\103\047\132\050\073\051\111\052" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\047\241\050\073\051" +
    "\111\052\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\272\001\001\000\002\001\001" +
    "\000\004\033\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\107\010\112\011\120\013\116\014" +
    "\064\015\114\016\075\017\065\020\053\027\100\030\074" +
    "\032\303\042\101\043\056\044\103\047\302\050\073\051" +
    "\111\052\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\307\054" +
    "\004\001\001\000\020\004\014\005\021\012\007\021\006" +
    "\022\015\025\011\026\012\001\001\000\006\003\311\054" +
    "\004\001\001\000\020\004\014\005\021\012\007\021\006" +
    "\022\015\025\011\026\012\001\001\000\050\007\107\010" +
    "\112\011\120\013\116\014\064\015\114\016\075\017\065" +
    "\020\053\027\100\030\074\032\317\042\101\043\056\044" +
    "\103\047\316\050\073\051\111\052\102\001\001\000\050" +
    "\007\107\010\112\011\120\013\116\014\064\015\114\016" +
    "\075\017\065\020\053\027\100\030\074\032\315\042\101" +
    "\043\056\044\103\047\314\050\073\051\111\052\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$grammar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$grammar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$grammar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

        public SMPLParser(String file) throws FileNotFoundException {
            this(new SMPLLexer(new FileReader(file)));
        }

        public SMPLParser(InputStream is) {
            this(new SMPLLexer(is));
        }

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$grammar$actions {
  private final grammar parser;

  /** Constructor */
  CUP$grammar$actions(grammar parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$grammar$do_action(
    int                        CUP$grammar$act_num,
    java_cup.runtime.lr_parser CUP$grammar$parser,
    java.util.Stack            CUP$grammar$stack,
    int                        CUP$grammar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$grammar$result;

      /* select the action based on the action number */
      switch (CUP$grammar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // empty ::= 
            {
              Object RESULT =null;

              CUP$grammar$result = parser.getSymbolFactory().newSymbol("empty",42, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arithFactor ::= MINUS arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
		      RESULT = new ASTUnaryExp<AIRExp>("-", f);
		
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithFactor",40, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arithFactor ::= VAR 
            {
              ASTExp<AIRExp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new ASTVar(var); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithFactor",40, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithFactor ::= arithConstFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> cf = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = cf; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithFactor",40, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arithConstFactor ::= LPAREN arithExp RPAREN 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = e; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithConstFactor",39, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arithConstFactor ::= BIN 
            {
              ASTExp<AIRExp> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new AIRExpInt(b); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithConstFactor",39, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arithConstFactor ::= HEX 
            {
              ASTExp<AIRExp> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new AIRExpInt(h); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithConstFactor",39, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arithConstFactor ::= FRACTION 
            {
              ASTExp<AIRExp> RESULT =null;
		int fracleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fracright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		Double frac = (Double)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new AIRExpFrac(frac); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithConstFactor",39, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arithConstFactor ::= INTEGER 
            {
              ASTExp<AIRExp> RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new AIRExpInt(ilit); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithConstFactor",39, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arithTerm ::= arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = f; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithTerm",38, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arithTerm ::= arithTerm MOD arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("%", t, f); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithTerm",38, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arithTerm ::= arithTerm DIV arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("/", t, f); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithTerm",38, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("*", t, f); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithTerm",38, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arithExp ::= arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = t; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExp",37, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arithExp ::= arithExp MINUS arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", e, t); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExp",37, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arithExp ::= arithExp PLUS arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("+", e, t); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExp",37, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arithExpListE ::= empty 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExpListE",31, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arithExpListE ::= arithExpList 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = lst; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExpListE",31, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arithExpList ::= LBRACKET arithExpList RBRACKET 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
            RESULT = lst;
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExpList",30, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arithExpList ::= LIST LPAREN arithExpList RPAREN 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
	        RESULT = lst;
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExpList",30, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithExpList ::= arithExp 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
	        RESULT = new ArrayList<>();
            RESULT.add(e);;
	    
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExpList",30, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arithExpList ::= arithExpList COMMA arithExp 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
	        lst.add(e);
	    	RESULT = lst;
	    
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("arithExpList",30, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // idListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("idListE",36, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // idListE ::= idList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = lst; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("idListE",36, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // idList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
				RESULT = new ArrayList<>();
				RESULT.add(id);
			
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("idList",35, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // idList ::= idList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
		    lst.add(id);
		    RESULT = lst;
		    
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("idList",35, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lazy ::= LAZY LPAREN arithExp RPAREN 
            {
              SMPLLazyStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLLazyStmt(e); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("lazy",14, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funCall ::= lazy 
            {
              SMPLFunCall RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLLazyStmt l = (SMPLLazyStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = l;
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funCall ::= proc 
            {
              SMPLFunCall RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLExpProcedure p = (SMPLExpProcedure)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = p;
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funCall ::= cdr 
            {
              SMPLFunCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLCdrStmt c = (SMPLCdrStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = c;
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funCall ::= car 
            {
              SMPLFunCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLCarStmt c = (SMPLCarStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = c;
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funCall ::= CALL LPAREN VAR COMMA arithExpList RPAREN 
            {
              SMPLFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ArrayList<ASTExp<AIRExp>> args = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
	        RESULT = new SMPLFunCall(fn, args);
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funCall ::= VAR LPAREN arithExpListE RPAREN 
            {
              SMPLFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ArrayList<ASTExp<AIRExp>> args = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
	    	RESULT = new SMPLFunCall(fn, args);
	    
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("funCall",21, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // smplFunCall ::= VAR LPAREN smplExpList RPAREN 
            {
              SMPLExpFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ArrayList<ASTExp<SMPLExp>> args = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                   RESULT = new SMPLExpFunCall(fn, args);
               
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplFunCall",22, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // smplFunCall ::= CALL LPAREN VAR COMMA smplExpList RPAREN 
            {
              SMPLExpFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ArrayList<ASTExp<SMPLExp>> args = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                    RESULT = new SMPLExpFunCall(fn, args);
               
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplFunCall",22, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // let ::= LET LPAREN binding RPAREN stmtList 
            {
              SMPLLetStmt RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		SMPLDefinition ids = (SMPLDefinition)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSequence body = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = new SMPLLetStmt(ids,body);
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("let",16, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // let ::= LET LPAREN bindList RPAREN stmtList 
            {
              SMPLLetStmt RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<SMPLDefinition> ids = (ArrayList<SMPLDefinition>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSequence body = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = new SMPLLetStmt(ids,body);
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("let",16, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // caseFunc ::= CASE LBRACE caseList COMMA ELSE stmt RBRACE 
            {
              SMPLCaseFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)).right;
		ArrayList<SMPLCaseStmt> lst = (ArrayList<SMPLCaseStmt>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = new SMPLCaseFunction(lst,s);
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("caseFunc",19, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-6)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caseList ::= caseList COMMA casestmt 
            {
              ArrayList<SMPLCaseStmt> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<SMPLCaseStmt> l = (ArrayList<SMPLCaseStmt>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLCaseStmt c = (SMPLCaseStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("caseList",18, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // casestmt ::= predExp COLON stmt 
            {
              SMPLCaseStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<CIRExp> p = (ASTExp<CIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new SMPLCaseStmt(p,s);
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("casestmt",17, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if ::= IF predExp THEN stmtList ELSE stmtList 
            {
              SMPLIfStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)).right;
		ASTExp<CIRExp> p = (ASTExp<CIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-4)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		SMPLSequence cons = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSequence alt = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = new SMPLIfStmt(p,cons,alt);
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if ::= IF predExp THEN stmtList 
            {
              SMPLIfStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp<CIRExp> p = (ASTExp<CIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSequence cons = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
            RESULT = new SMPLIfStmt(p,cons);
        
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // read ::= READINT LPAREN RPAREN 
            {
              SMPLReadStmt RESULT =null;
		
                RESULT = new SMPLReadStmt(true);
         
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("read",20, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read ::= READ LPAREN RPAREN 
            {
              SMPLReadStmt RESULT =null;
		
                RESULT = new SMPLReadStmt(false);
         
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("read",20, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // print ::= PRINTLN LPAREN stringExp RPAREN 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
            RESULT = new SMPLPrintStmt(e,true);
          
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // print ::= PRINT LPAREN stringExp RPAREN 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
            RESULT = new SMPLPrintStmt(e,true);
          
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // proc ::= PROC LPAREN idListE RPAREN LBRACE stmtList RBRACE 
            {
              SMPLExpProcedure RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLSequence body = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLExpProcedure(lst,body); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("proc",34, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-6)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // substr ::= SUBSTRING LPAREN STRING COMMA INTEGER COMMA INTEGER RPAREN 
            {
              SMPLSubStrStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLSubStrStmt(s,start,end); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("substr",13, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-7)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // isEqv ::= IFEQUIVALENT LPAREN astExp COMMA astExp RPAREN 
            {
              SMPLIsEqvStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLIsEqvStmt(e,e2); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("isEqv",12, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // isEqual ::= IFEQUAL LPAREN astExp COMMA astExp RPAREN 
            {
              SMPLIsEqualStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLIsEqualStmt(e,e2); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("isEqual",11, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // size ::= SIZE LPAREN vector RPAREN 
            {
              SMPLSizeStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLVectorExp v = (SMPLVectorExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLSizeStmt(v); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("size",10, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // retVec ::= vector LBRACKET INTEGER RBRACKET 
            {
              SMPLRetVctStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		SMPLVectorExp v = (SMPLVectorExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLRetVctStmt(v,i); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("retVec",9, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // isPair ::= IFPAIR LPAREN exPair RPAREN 
            {
              SMPLisPairStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLPairExp p = (SMPLPairExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLisPairStmt(p); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("isPair",7, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cdr ::= CDR LPAREN exPair RPAREN 
            {
              SMPLCdrStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLPairExp p = (SMPLPairExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLCdrStmt(p); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("cdr",6, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // car ::= CAR LPAREN exPair RPAREN 
            {
              SMPLCarStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLPairExp p = (SMPLPairExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		 RESULT = new SMPLCarStmt(p); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("car",5, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vector ::= LBRACKET COLON vectorList COLON RBRACKET 
            {
              SMPLVectorExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<ASTExp> l = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		
                            RESULT = new SMPLVectorExp(l);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("vector",33, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vector ::= LBRACKET COLON astExp COLON RBRACKET 
            {
              SMPLVectorExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ASTExp v = (ASTExp)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		
                RESULT = new SMPLVectorExp(v);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("vector",33, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-4)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exPair ::= PAIR LPAREN arithExp COMMA arithExp RPAREN 
            {
              SMPLPairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		ASTExp<AIRExp> e1 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ASTExp<AIRExp> e2 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = new exPair(e1,e2);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("exPair",32, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exPair ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              SMPLPairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-3)).right;
		ASTExp<SMPLExp> e1 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		ASTExp<SMPLExp> e2 = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = new exPair((SMPLExp)e1,(SMPLExp)e2);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("exPair",32, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-5)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // smplExpListE ::= empty 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		
                    RESULT = new ArrayList<>();
                 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExpListE",28, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // smplExpListE ::= smplExpList 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ArrayList<ASTExp<SMPLExp>> lst = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                    RESULT = lst;
                 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExpListE",28, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // smplExpList ::= smplExp 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                  RESULT = new ArrayList<>();
                  RESULT.add(e);
                
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExpList",27, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<ASTExp<SMPLExp>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<ASTExp<SMPLExp>> l = (ArrayList<ASTExp<SMPLExp>>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                    l.add(e);
                    RESULT = l;
                
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExpList",27, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // smplExp ::= funCall 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLFunCall f = (SMPLFunCall)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = f;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // smplExp ::= substr 
            {
              ASTExp<SMPLExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSubStrStmt s = (SMPLSubStrStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                 RESULT = s;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // smplExp ::= isEqv 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLIsEqvStmt e = (SMPLIsEqvStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                 RESULT = e;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // smplExp ::= isEqual 
            {
              ASTExp<SMPLExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLIsEqualStmt e = (SMPLIsEqualStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                 RESULT = e;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // smplExp ::= size 
            {
              ASTExp<SMPLExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSizeStmt s = (SMPLSizeStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                 RESULT = s;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // smplExp ::= retVec 
            {
              ASTExp<SMPLExp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLRetVctStmt r = (SMPLRetVctStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                 RESULT = r;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // smplExp ::= isPair 
            {
              ASTExp<SMPLExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLisPairStmt p = (SMPLisPairStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                 RESULT = p;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // smplExp ::= smplFunCall 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLExpFunCall f = (SMPLExpFunCall)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = f;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // smplExp ::= FALSE 
            {
              ASTExp<SMPLExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new BoolExp(f);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // smplExp ::= STRING 
            {
              ASTExp<SMPLExp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new StringExp(s);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // smplExp ::= TRUE 
            {
              ASTExp<SMPLExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new BoolExp(t);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // smplExp ::= CHAR 
            {
              ASTExp<SMPLExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new StringExp(c);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // smplExp ::= vector 
            {
              ASTExp<SMPLExp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLVectorExp v = (SMPLVectorExp)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = v;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // smplExp ::= exPair 
            {
              ASTExp<SMPLExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLPairExp p = (SMPLPairExp)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = p;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("smplExp",24, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // predExp ::= VAR CMP smplExp 
            {
              ASTExp<CIRExp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		String cmp = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new CIRExp(id,cmp,(SMPLExp)e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("predExp",29, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // predExp ::= VAR CMP arithExp 
            {
              ASTExp<CIRExp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		String cmp = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                RESULT = new CIRExp(id,cmp,e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("predExp",29, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bindList ::= bindList COMMA binding 
            {
              ArrayList<SMPLDefinition> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		ArrayList<SMPLDefinition> l = (ArrayList<SMPLDefinition>)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLDefinition b = (SMPLDefinition)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
                l.add(b);
                RESULT = l;
             
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("bindList",4, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // binding ::= VAR ASSIGN arithExp 
            {
              SMPLDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
              RESULT = new SMPLStmtDefinition(v,e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // binding ::= VAR ASSIGN smplExp 
            {
              SMPLDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
              RESULT = new SMPLStmtDefinition(v,e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // binding ::= VAR BE arithExp 
            {
              SMPLDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
              RESULT = new SMPLStmtDefinition(v,e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // binding ::= VAR BE smplExp 
            {
              SMPLDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
              RESULT = new SMPLDefinition(v,e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // binding ::= DEF VAR smplExp 
            {
              SMPLDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<SMPLExp> e = (ASTExp<SMPLExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
    		      RESULT = new SMPLDefinition(v,e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // binding ::= DEF VAR arithExp 
            {
              SMPLDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
              RESULT = new SMPLDefinition(v, e);
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("binding",3, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-2)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= caseFunc SEMI 
            {
              SMPLStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLCaseFunction c = (SMPLCaseFunction)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = c;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= let SEMI 
            {
              SMPLStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLLetStmt l = (SMPLLetStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = l;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= if SEMI 
            {
              SMPLStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLIfStmt i = (SMPLIfStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = i;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= read SEMI 
            {
              SMPLStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLReadStmt r = (SMPLReadStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = r;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= print SEMI 
            {
              SMPLStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLPrintStmt p = (SMPLPrintStmt)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = p;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= binding SEMI 
            {
              SMPLStatement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLDefinition b = (SMPLDefinition)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		
                RESULT = b;
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= empty 
            {
              SMPLSequence RESULT =null;
		
              RESULT = new SMPLSequence(); 
            
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SMPLSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLSequence seq = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		
              seq.addStatement(s);
              RESULT = seq; 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$grammar$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          return CUP$grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$grammar$stack.elementAt(CUP$grammar$top-1)).value;
		RESULT = start_val;
              CUP$grammar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$grammar$stack.elementAt(CUP$grammar$top-1)), ((java_cup.runtime.Symbol)CUP$grammar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$grammar$parser.done_parsing();
          return CUP$grammar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

